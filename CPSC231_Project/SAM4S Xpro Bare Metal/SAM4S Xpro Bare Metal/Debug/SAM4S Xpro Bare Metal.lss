
SAM4S Xpro Bare Metal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009a4  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000082c  20000000  004009a4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  2000082c  004011d0  0002082c  2**2
                  ALLOC
  3 .stack        00003004  2000086c  00401210  0002082c  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  0002082c  2**0
                  CONTENTS, READONLY
  5 .debug_line   000003aa  00000000  00000000  00020856  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000002dc  00000000  00000000  00020c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000064  00000000  00000000  00020edc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000000a0  00000000  00000000  00020f40  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000194  00000000  00000000  00020fe0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20003870 	.word	0x20003870
  400004:	0040012d 	.word	0x0040012d

00400008 <__do_global_dtors_aux>:
  400008:	b510      	push	{r4, lr}
  40000a:	4c05      	ldr	r4, [pc, #20]	; (400020 <__do_global_dtors_aux+0x18>)
  40000c:	7823      	ldrb	r3, [r4, #0]
  40000e:	b933      	cbnz	r3, 40001e <__do_global_dtors_aux+0x16>
  400010:	4b04      	ldr	r3, [pc, #16]	; (400024 <__do_global_dtors_aux+0x1c>)
  400012:	b113      	cbz	r3, 40001a <__do_global_dtors_aux+0x12>
  400014:	4804      	ldr	r0, [pc, #16]	; (400028 <__do_global_dtors_aux+0x20>)
  400016:	f3af 8000 	nop.w
  40001a:	2301      	movs	r3, #1
  40001c:	7023      	strb	r3, [r4, #0]
  40001e:	bd10      	pop	{r4, pc}
  400020:	2000082c 	.word	0x2000082c
  400024:	00000000 	.word	0x00000000
  400028:	004009a4 	.word	0x004009a4

0040002c <frame_dummy>:
  40002c:	4b0c      	ldr	r3, [pc, #48]	; (400060 <frame_dummy+0x34>)
  40002e:	b143      	cbz	r3, 400042 <frame_dummy+0x16>
  400030:	480c      	ldr	r0, [pc, #48]	; (400064 <frame_dummy+0x38>)
  400032:	490d      	ldr	r1, [pc, #52]	; (400068 <frame_dummy+0x3c>)
  400034:	b510      	push	{r4, lr}
  400036:	f3af 8000 	nop.w
  40003a:	480c      	ldr	r0, [pc, #48]	; (40006c <frame_dummy+0x40>)
  40003c:	6803      	ldr	r3, [r0, #0]
  40003e:	b923      	cbnz	r3, 40004a <frame_dummy+0x1e>
  400040:	bd10      	pop	{r4, pc}
  400042:	480a      	ldr	r0, [pc, #40]	; (40006c <frame_dummy+0x40>)
  400044:	6803      	ldr	r3, [r0, #0]
  400046:	b933      	cbnz	r3, 400056 <frame_dummy+0x2a>
  400048:	4770      	bx	lr
  40004a:	4b09      	ldr	r3, [pc, #36]	; (400070 <frame_dummy+0x44>)
  40004c:	2b00      	cmp	r3, #0
  40004e:	d0f7      	beq.n	400040 <frame_dummy+0x14>
  400050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400054:	4718      	bx	r3
  400056:	4b06      	ldr	r3, [pc, #24]	; (400070 <frame_dummy+0x44>)
  400058:	2b00      	cmp	r3, #0
  40005a:	d0f5      	beq.n	400048 <frame_dummy+0x1c>
  40005c:	4718      	bx	r3
  40005e:	bf00      	nop
  400060:	00000000 	.word	0x00000000
  400064:	004009a4 	.word	0x004009a4
  400068:	20000830 	.word	0x20000830
  40006c:	004009a4 	.word	0x004009a4
  400070:	00000000 	.word	0x00000000

00400074 <set_r0>:
  400074:	b503      	push	{r0, r1, lr}
  400076:	4610      	mov	r0, r2
  400078:	f04f 0111 	mov.w	r1, #17
  40007c:	f000 fba6 	bl	4007cc <pioa_level_set>
  400080:	bd03      	pop	{r0, r1, pc}

00400082 <set_g0>:
  400082:	b503      	push	{r0, r1, lr}
  400084:	4610      	mov	r0, r2
  400086:	f04f 0118 	mov.w	r1, #24
  40008a:	f000 fb9f 	bl	4007cc <pioa_level_set>
  40008e:	bd03      	pop	{r0, r1, pc}

00400090 <set_b0>:
  400090:	b503      	push	{r0, r1, lr}
  400092:	4610      	mov	r0, r2
  400094:	f04f 0117 	mov.w	r1, #23
  400098:	f000 fb98 	bl	4007cc <pioa_level_set>
  40009c:	bd03      	pop	{r0, r1, pc}

0040009e <set_r1>:
  40009e:	b503      	push	{r0, r1, lr}
  4000a0:	4610      	mov	r0, r2
  4000a2:	f04f 0101 	mov.w	r1, #1
  4000a6:	f000 fb91 	bl	4007cc <pioa_level_set>
  4000aa:	bd03      	pop	{r0, r1, pc}

004000ac <set_g1>:
  4000ac:	b503      	push	{r0, r1, lr}
  4000ae:	4610      	mov	r0, r2
  4000b0:	f04f 0103 	mov.w	r1, #3
  4000b4:	f000 fb8a 	bl	4007cc <pioa_level_set>
  4000b8:	bd03      	pop	{r0, r1, pc}

004000ba <set_b1>:
  4000ba:	b503      	push	{r0, r1, lr}
  4000bc:	4610      	mov	r0, r2
  4000be:	f04f 0115 	mov.w	r1, #21
  4000c2:	f000 fb83 	bl	4007cc <pioa_level_set>
  4000c6:	bd03      	pop	{r0, r1, pc}

004000c8 <set_a0>:
  4000c8:	b503      	push	{r0, r1, lr}
  4000ca:	4610      	mov	r0, r2
  4000cc:	f04f 0119 	mov.w	r1, #25
  4000d0:	f000 fbac 	bl	40082c <pioc_level_set>
  4000d4:	bd03      	pop	{r0, r1, pc}

004000d6 <set_a1>:
  4000d6:	b503      	push	{r0, r1, lr}
  4000d8:	4610      	mov	r0, r2
  4000da:	f04f 0118 	mov.w	r1, #24
  4000de:	f000 fba5 	bl	40082c <pioc_level_set>
  4000e2:	bd03      	pop	{r0, r1, pc}

004000e4 <set_a2>:
  4000e4:	b503      	push	{r0, r1, lr}
  4000e6:	4610      	mov	r0, r2
  4000e8:	f04f 0113 	mov.w	r1, #19
  4000ec:	f000 fb9e 	bl	40082c <pioc_level_set>
  4000f0:	bd03      	pop	{r0, r1, pc}

004000f2 <set_a3>:
  4000f2:	b503      	push	{r0, r1, lr}
  4000f4:	4610      	mov	r0, r2
  4000f6:	f04f 011a 	mov.w	r1, #26
  4000fa:	f000 fb97 	bl	40082c <pioc_level_set>
  4000fe:	bd03      	pop	{r0, r1, pc}

00400100 <set_clk>:
  400100:	b503      	push	{r0, r1, lr}
  400102:	4610      	mov	r0, r2
  400104:	f04f 011d 	mov.w	r1, #29
  400108:	f000 fb90 	bl	40082c <pioc_level_set>
  40010c:	bd03      	pop	{r0, r1, pc}

0040010e <set_stb>:
  40010e:	b503      	push	{r0, r1, lr}
  400110:	4610      	mov	r0, r2
  400112:	f04f 0115 	mov.w	r1, #21
  400116:	f000 fb89 	bl	40082c <pioc_level_set>
  40011a:	bd03      	pop	{r0, r1, pc}

0040011c <set_oe>:
  40011c:	b503      	push	{r0, r1, lr}
  40011e:	4610      	mov	r0, r2
  400120:	f04f 0114 	mov.w	r1, #20
  400124:	f000 fb82 	bl	40082c <pioc_level_set>
  400128:	bd03      	pop	{r0, r1, pc}
	...

0040012c <main>:

.section .text
.thumb_func
.global main
main:
ldr r9, =grid // Loads grid to avoid optimization
  40012c:	f8df 94b0 	ldr.w	r9, [pc, #1200]	; 4005e0 <isAlive_done+0x2>
bl init
  400130:	f000 fa58 	bl	4005e4 <init>

bl load_grid
  400134:	f000 fabe 	bl	4006b4 <load_grid>
mov r6, #0 // {r0} must be set to zero at the start
  400138:	f04f 0600 	mov.w	r6, #0

// Blinker (period 2)
/*=======================================================*/
mov r8, #4
  40013c:	f04f 0804 	mov.w	r8, #4
mov r9, #25
  400140:	f04f 0919 	mov.w	r9, #25
mov r10, #1
  400144:	f04f 0a01 	mov.w	sl, #1
bl set_pixel
  400148:	f000 fac8 	bl	4006dc <set_pixel>

mov r8, #5
  40014c:	f04f 0805 	mov.w	r8, #5
mov r9, #25
  400150:	f04f 0919 	mov.w	r9, #25
mov r10, #1
  400154:	f04f 0a01 	mov.w	sl, #1
bl set_pixel
  400158:	f000 fac0 	bl	4006dc <set_pixel>

mov r8, #6
  40015c:	f04f 0806 	mov.w	r8, #6
mov r9, #25
  400160:	f04f 0919 	mov.w	r9, #25
mov r10, #1
  400164:	f04f 0a01 	mov.w	sl, #1
bl set_pixel
  400168:	f000 fab8 	bl	4006dc <set_pixel>
/*=======================================================*/

// Penta-decathlon (period 15)
/*=======================================================*/
mov r8, #15
  40016c:	f04f 080f 	mov.w	r8, #15
mov r9, #15
  400170:	f04f 090f 	mov.w	r9, #15
mov r10, #1
  400174:	f04f 0a01 	mov.w	sl, #1
bl set_pixel
  400178:	f000 fab0 	bl	4006dc <set_pixel>

mov r8, #16
  40017c:	f04f 0810 	mov.w	r8, #16
mov r9, #15
  400180:	f04f 090f 	mov.w	r9, #15
mov r10, #1
  400184:	f04f 0a01 	mov.w	sl, #1
bl set_pixel
  400188:	f000 faa8 	bl	4006dc <set_pixel>

mov r8, #17
  40018c:	f04f 0811 	mov.w	r8, #17
mov r9, #15
  400190:	f04f 090f 	mov.w	r9, #15
mov r10, #1
  400194:	f04f 0a01 	mov.w	sl, #1
bl set_pixel
  400198:	f000 faa0 	bl	4006dc <set_pixel>

mov r8, #15
  40019c:	f04f 080f 	mov.w	r8, #15
mov r9, #16
  4001a0:	f04f 0910 	mov.w	r9, #16
mov r10, #1
  4001a4:	f04f 0a01 	mov.w	sl, #1
bl set_pixel
  4001a8:	f000 fa98 	bl	4006dc <set_pixel>

mov r8, #17
  4001ac:	f04f 0811 	mov.w	r8, #17
mov r9, #16
  4001b0:	f04f 0910 	mov.w	r9, #16
mov r10, #1
  4001b4:	f04f 0a01 	mov.w	sl, #1
bl set_pixel
  4001b8:	f000 fa90 	bl	4006dc <set_pixel>

mov r8, #15
  4001bc:	f04f 080f 	mov.w	r8, #15
mov r9, #17
  4001c0:	f04f 0911 	mov.w	r9, #17
mov r10, #1
  4001c4:	f04f 0a01 	mov.w	sl, #1
bl set_pixel
  4001c8:	f000 fa88 	bl	4006dc <set_pixel>

mov r8, #16
  4001cc:	f04f 0810 	mov.w	r8, #16
mov r9, #17
  4001d0:	f04f 0911 	mov.w	r9, #17
mov r10, #1
  4001d4:	f04f 0a01 	mov.w	sl, #1
bl set_pixel
  4001d8:	f000 fa80 	bl	4006dc <set_pixel>

mov r8, #17
  4001dc:	f04f 0811 	mov.w	r8, #17
mov r9, #17
  4001e0:	f04f 0911 	mov.w	r9, #17
mov r10, #1
  4001e4:	f04f 0a01 	mov.w	sl, #1
bl set_pixel
  4001e8:	f000 fa78 	bl	4006dc <set_pixel>

mov r8, #15
  4001ec:	f04f 080f 	mov.w	r8, #15
mov r9, #18
  4001f0:	f04f 0912 	mov.w	r9, #18
mov r10, #1
  4001f4:	f04f 0a01 	mov.w	sl, #1
bl set_pixel
  4001f8:	f000 fa70 	bl	4006dc <set_pixel>

mov r8, #16
  4001fc:	f04f 0810 	mov.w	r8, #16
mov r9, #18
  400200:	f04f 0912 	mov.w	r9, #18
mov r10, #1
  400204:	f04f 0a01 	mov.w	sl, #1
bl set_pixel
  400208:	f000 fa68 	bl	4006dc <set_pixel>

mov r8, #17
  40020c:	f04f 0811 	mov.w	r8, #17
mov r9, #18
  400210:	f04f 0912 	mov.w	r9, #18
mov r10, #1
  400214:	f04f 0a01 	mov.w	sl, #1
bl set_pixel
  400218:	f000 fa60 	bl	4006dc <set_pixel>

mov r8, #15
  40021c:	f04f 080f 	mov.w	r8, #15
mov r9, #19
  400220:	f04f 0913 	mov.w	r9, #19
mov r10, #1
  400224:	f04f 0a01 	mov.w	sl, #1
bl set_pixel
  400228:	f000 fa58 	bl	4006dc <set_pixel>

mov r8, #16
  40022c:	f04f 0810 	mov.w	r8, #16
mov r9, #19
  400230:	f04f 0913 	mov.w	r9, #19
mov r10, #1
  400234:	f04f 0a01 	mov.w	sl, #1
bl set_pixel
  400238:	f000 fa50 	bl	4006dc <set_pixel>

mov r8, #17
  40023c:	f04f 0811 	mov.w	r8, #17
mov r9, #19
  400240:	f04f 0913 	mov.w	r9, #19
mov r10, #1
  400244:	f04f 0a01 	mov.w	sl, #1
bl set_pixel
  400248:	f000 fa48 	bl	4006dc <set_pixel>

mov r8, #15
  40024c:	f04f 080f 	mov.w	r8, #15
mov r9, #20
  400250:	f04f 0914 	mov.w	r9, #20
mov r10, #1
  400254:	f04f 0a01 	mov.w	sl, #1
bl set_pixel
  400258:	f000 fa40 	bl	4006dc <set_pixel>

mov r8, #16
  40025c:	f04f 0810 	mov.w	r8, #16
mov r9, #20
  400260:	f04f 0914 	mov.w	r9, #20
mov r10, #1
  400264:	f04f 0a01 	mov.w	sl, #1
bl set_pixel
  400268:	f000 fa38 	bl	4006dc <set_pixel>

mov r8, #17
  40026c:	f04f 0811 	mov.w	r8, #17
mov r9, #20
  400270:	f04f 0914 	mov.w	r9, #20
mov r10, #1
  400274:	f04f 0a01 	mov.w	sl, #1
bl set_pixel
  400278:	f000 fa30 	bl	4006dc <set_pixel>

mov r8, #15
  40027c:	f04f 080f 	mov.w	r8, #15
mov r9, #21
  400280:	f04f 0915 	mov.w	r9, #21
mov r10, #1
  400284:	f04f 0a01 	mov.w	sl, #1
bl set_pixel
  400288:	f000 fa28 	bl	4006dc <set_pixel>

mov r8, #17
  40028c:	f04f 0811 	mov.w	r8, #17
mov r9, #21
  400290:	f04f 0915 	mov.w	r9, #21
mov r10, #1
  400294:	f04f 0a01 	mov.w	sl, #1
bl set_pixel
  400298:	f000 fa20 	bl	4006dc <set_pixel>

mov r8, #15
  40029c:	f04f 080f 	mov.w	r8, #15
mov r9, #22
  4002a0:	f04f 0916 	mov.w	r9, #22
mov r10, #1
  4002a4:	f04f 0a01 	mov.w	sl, #1
bl set_pixel
  4002a8:	f000 fa18 	bl	4006dc <set_pixel>


mov r8, #16
  4002ac:	f04f 0810 	mov.w	r8, #16
mov r9, #22
  4002b0:	f04f 0916 	mov.w	r9, #22
mov r10, #1
  4002b4:	f04f 0a01 	mov.w	sl, #1
bl set_pixel
  4002b8:	f000 fa10 	bl	4006dc <set_pixel>

mov r8, #17
  4002bc:	f04f 0811 	mov.w	r8, #17
mov r9, #22
  4002c0:	f04f 0916 	mov.w	r9, #22
mov r10, #1
  4002c4:	f04f 0a01 	mov.w	sl, #1
bl set_pixel
  4002c8:	f000 fa08 	bl	4006dc <set_pixel>
/*=======================================================*/


//Glider (space ship)
/*=======================================================*/
mov r8, #1
  4002cc:	f04f 0801 	mov.w	r8, #1
mov r9, #1
  4002d0:	f04f 0901 	mov.w	r9, #1
mov r10, #1
  4002d4:	f04f 0a01 	mov.w	sl, #1
bl set_pixel
  4002d8:	f000 fa00 	bl	4006dc <set_pixel>

mov r8, #3
  4002dc:	f04f 0803 	mov.w	r8, #3
mov r9, #1
  4002e0:	f04f 0901 	mov.w	r9, #1
mov r10, #1
  4002e4:	f04f 0a01 	mov.w	sl, #1
bl set_pixel
  4002e8:	f000 f9f8 	bl	4006dc <set_pixel>

mov r8, #2
  4002ec:	f04f 0802 	mov.w	r8, #2
mov r9, #2
  4002f0:	f04f 0902 	mov.w	r9, #2
mov r10, #1
  4002f4:	f04f 0a01 	mov.w	sl, #1
bl set_pixel
  4002f8:	f000 f9f0 	bl	4006dc <set_pixel>

mov r8, #3
  4002fc:	f04f 0803 	mov.w	r8, #3
mov r9, #2
  400300:	f04f 0902 	mov.w	r9, #2
mov r10, #1
  400304:	f04f 0a01 	mov.w	sl, #1
bl set_pixel
  400308:	f000 f9e8 	bl	4006dc <set_pixel>

mov r8, #2
  40030c:	f04f 0802 	mov.w	r8, #2
mov r9, #3
  400310:	f04f 0903 	mov.w	r9, #3
mov r10, #1
  400314:	f04f 0a01 	mov.w	sl, #1
bl set_pixel
  400318:	f000 f9e0 	bl	4006dc <set_pixel>
/*=======================================================*/
// Block (still life)
/*=======================================================*/
mov r8, #25
  40031c:	f04f 0819 	mov.w	r8, #25
mov r9, #3
  400320:	f04f 0903 	mov.w	r9, #3
mov r10, #1
  400324:	f04f 0a01 	mov.w	sl, #1
bl set_pixel
  400328:	f000 f9d8 	bl	4006dc <set_pixel>

mov r8, #26
  40032c:	f04f 081a 	mov.w	r8, #26
mov r9, #3
  400330:	f04f 0903 	mov.w	r9, #3
mov r10, #1
  400334:	f04f 0a01 	mov.w	sl, #1
bl set_pixel
  400338:	f000 f9d0 	bl	4006dc <set_pixel>

mov r8, #25
  40033c:	f04f 0819 	mov.w	r8, #25
mov r9, #4
  400340:	f04f 0904 	mov.w	r9, #4
mov r10, #1
  400344:	f04f 0a01 	mov.w	sl, #1
bl set_pixel
  400348:	f000 f9c8 	bl	4006dc <set_pixel>

mov r8, #26
  40034c:	f04f 081a 	mov.w	r8, #26
mov r9, #4
  400350:	f04f 0904 	mov.w	r9, #4
mov r10, #1
  400354:	f04f 0a01 	mov.w	sl, #1
bl set_pixel
  400358:	f000 f9c0 	bl	4006dc <set_pixel>
/*=======================================================*/

/*=======================================================*/
mov r8, #5
  40035c:	f04f 0805 	mov.w	r8, #5
mov r9, #15
  400360:	f04f 090f 	mov.w	r9, #15
mov r10, #1
  400364:	f04f 0a01 	mov.w	sl, #1
bl set_pixel
  400368:	f000 f9b8 	bl	4006dc <set_pixel>

mov r8, #6
  40036c:	f04f 0806 	mov.w	r8, #6
mov r9, #16
  400370:	f04f 0910 	mov.w	r9, #16
mov r10, #1
  400374:	f04f 0a01 	mov.w	sl, #1
bl set_pixel
  400378:	f000 f9b0 	bl	4006dc <set_pixel>

mov r8, #5
  40037c:	f04f 0805 	mov.w	r8, #5
mov r9, #17
  400380:	f04f 0911 	mov.w	r9, #17
mov r10, #1
  400384:	f04f 0a01 	mov.w	sl, #1
bl set_pixel
  400388:	f000 f9a8 	bl	4006dc <set_pixel>

mov r8, #4
  40038c:	f04f 0804 	mov.w	r8, #4
mov r9, #16
  400390:	f04f 0910 	mov.w	r9, #16
mov r10, #1
  400394:	f04f 0a01 	mov.w	sl, #1
bl set_pixel
  400398:	f000 f9a0 	bl	4006dc <set_pixel>

0040039c <update_grid>:
/*=======================================================*/
update_grid:
cmp r6, #0
  40039c:	2e00      	cmp	r6, #0
beq set_to_1
  40039e:	d002      	beq.n	4003a6 <set_to_1>
mov r6, #0
  4003a0:	f04f 0600 	mov.w	r6, #0
b rickroll
  4003a4:	e001      	b.n	4003aa <rickroll>

004003a6 <set_to_1>:
set_to_1:
mov r6, #1
  4003a6:	f04f 0601 	mov.w	r6, #1

004003aa <rickroll>:
rickroll:
mov r12, 0
  4003aa:	f04f 0c00 	mov.w	ip, #0
bl update
  4003ae:	f000 f85d 	bl	40046c <update>

004003b2 <main2>:


main2:
mov r11, 0xFF
  4003b2:	f04f 0bff 	mov.w	fp, #255	; 0xff
cmp r12, r11
  4003b6:	45dc      	cmp	ip, fp
beq update_grid
  4003b8:	d0f0      	beq.n	40039c <update_grid>
add r12, #1
  4003ba:	f10c 0c01 	add.w	ip, ip, #1

mov r7, #0
  4003be:	f04f 0700 	mov.w	r7, #0

004003c2 <loop1>:
loop1: 
cmp r7, #16
  4003c2:	2f10      	cmp	r7, #16
beq end1
  4003c4:	d051      	beq.n	40046a <end1>
mov r3, #0
  4003c6:	f04f 0300 	mov.w	r3, #0

mov r4, #32
  4003ca:	f04f 0420 	mov.w	r4, #32
mul r4, r7, r4  // r4 = row * matrix_width = row*32
  4003ce:	fb07 f404 	mul.w	r4, r7, r4

004003d2 <loop2>:

	loop2: 
		cmp r3, #32
  4003d2:	2b20      	cmp	r3, #32
		beq end2
  4003d4:	d020      	beq.n	400418 <end2>
		
		add r5, r4, r3
  4003d6:	eb04 0503 	add.w	r5, r4, r3
		
		ldr r1,  =0x20000000 
  4003da:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
		ldrb r1, [r1,r5]
  4003de:	5d49      	ldrb	r1, [r1, r5]

		mov r9, r6
  4003e0:	46b1      	mov	r9, r6
		mov r2, r1
  4003e2:	460a      	mov	r2, r1
		lsr r2,r2, r9
  4003e4:	fa22 f209 	lsr.w	r2, r2, r9
		and r2, 0x01
  4003e8:	f002 0201 	and.w	r2, r2, #1
		bl set_r0
  4003ec:	f7ff fe42 	bl	400074 <set_r0>
		
		add r9, r6, #3
  4003f0:	f106 0903 	add.w	r9, r6, #3
		mov r2, r1
  4003f4:	460a      	mov	r2, r1
		lsr r2,r2, r9
  4003f6:	fa22 f209 	lsr.w	r2, r2, r9
		and r2, #1
  4003fa:	f002 0201 	and.w	r2, r2, #1
		bl set_r1
  4003fe:	f7ff fe4e 	bl	40009e <set_r1>
	

		mov r2, ON
  400402:	f04f 0201 	mov.w	r2, #1
		bl set_clk
  400406:	f7ff fe7b 	bl	400100 <set_clk>

		mov r2, OFF
  40040a:	f04f 0200 	mov.w	r2, #0
		bl set_clk
  40040e:	f7ff fe77 	bl	400100 <set_clk>

		add r3, #1
  400412:	f103 0301 	add.w	r3, r3, #1
		b loop2
  400416:	e7dc      	b.n	4003d2 <loop2>

00400418 <end2>:
	end2: 

mov r2, ON
  400418:	f04f 0201 	mov.w	r2, #1
 bl set_oe
  40041c:	f7ff fe7e 	bl	40011c <set_oe>
	a1 = c
	a2 = b
	a3 = a
*/

and r2, r7, #1
  400420:	f007 0201 	and.w	r2, r7, #1
bl set_a0 
  400424:	f7ff fe50 	bl	4000c8 <set_a0>

lsr r5, r7, #1
  400428:	ea4f 0557 	mov.w	r5, r7, lsr #1
and r2, r5, #1
  40042c:	f005 0201 	and.w	r2, r5, #1
bl set_a1
  400430:	f7ff fe51 	bl	4000d6 <set_a1>

lsr r5, r7, #2
  400434:	ea4f 0597 	mov.w	r5, r7, lsr #2
and  r2, r5, #1
  400438:	f005 0201 	and.w	r2, r5, #1
bl set_a2
  40043c:	f7ff fe52 	bl	4000e4 <set_a2>

lsr r5, r7, #3
  400440:	ea4f 05d7 	mov.w	r5, r7, lsr #3
and r2, r5, #1
  400444:	f005 0201 	and.w	r2, r5, #1
bl set_a3
  400448:	f7ff fe53 	bl	4000f2 <set_a3>


mov r2, ON
  40044c:	f04f 0201 	mov.w	r2, #1
bl set_stb
  400450:	f7ff fe5d 	bl	40010e <set_stb>

mov r2, OFF
  400454:	f04f 0200 	mov.w	r2, #0
bl set_stb
  400458:	f7ff fe59 	bl	40010e <set_stb>

mov r2, OFF
  40045c:	f04f 0200 	mov.w	r2, #0
bl set_oe 
  400460:	f7ff fe5c 	bl	40011c <set_oe>


add r7, #1
  400464:	f107 0701 	add.w	r7, r7, #1
b loop1
  400468:	e7ab      	b.n	4003c2 <loop1>

0040046a <end1>:
end1: 
b main2 
  40046a:	e7a2      	b.n	4003b2 <main2>

0040046c <update>:


.thumb_func
.global update 
update:
push {r0,r1,r2,r3,r8,r9,r10,lr}
  40046c:	e92d 470f 	stmdb	sp!, {r0, r1, r2, r3, r8, r9, sl, lr}
mov r0, #1// CHANGE BACK TO 1 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  400470:	f04f 0001 	mov.w	r0, #1
mov r3, 1
  400474:	f04f 0301 	mov.w	r3, #1

00400478 <update_loop1>:
*/


update_loop1: /////////////////////////////////////////

	cmp r0, #30
  400478:	281e      	cmp	r0, #30
	beq update_end1
  40047a:	d06e      	beq.n	40055a <update_end1>
	mov r3, #1
  40047c:	f04f 0301 	mov.w	r3, #1

00400480 <update_loop2>:

	update_loop2: /////////////////////////////////////////
		cmp r3, #30
  400480:	2b1e      	cmp	r3, #30
		beq update_end2
  400482:	d067      	beq.n	400554 <update_end2>

			// Find number of neighbours alive
			mov r2, #0
  400484:	f04f 0200 	mov.w	r2, #0
			// r5 Y
			// r4 X
			// Top Left

				sub r5, r0, #1
  400488:	f1a0 0501 	sub.w	r5, r0, #1
				sub r4, r3, #1
  40048c:	f1a3 0401 	sub.w	r4, r3, #1
				bl isAlive
  400490:	f000 f865 	bl	40055e <isAlive>
				add r2, r4
  400494:	4422      	add	r2, r4
			// Above 
				sub r5, r0, #1
  400496:	f1a0 0501 	sub.w	r5, r0, #1
				mov r4, r3
  40049a:	461c      	mov	r4, r3
				bl isAlive
  40049c:	f000 f85f 	bl	40055e <isAlive>
				add r2, r4 
  4004a0:	4422      	add	r2, r4
			// Top Right 
				sub r5, r0, #1
  4004a2:	f1a0 0501 	sub.w	r5, r0, #1
				add r4, r3, #1
  4004a6:	f103 0401 	add.w	r4, r3, #1
				bl isAlive
  4004aa:	f000 f858 	bl	40055e <isAlive>
				add r2, r4
  4004ae:	4422      	add	r2, r4

			// Bottom Left
				add r5, r0, #1
  4004b0:	f100 0501 	add.w	r5, r0, #1
				sub r4, r3, #1
  4004b4:	f1a3 0401 	sub.w	r4, r3, #1
				bl isAlive
  4004b8:	f000 f851 	bl	40055e <isAlive>
				add r2, r4
  4004bc:	4422      	add	r2, r4

			// Bottom Right 
				add r5, r0, #1
  4004be:	f100 0501 	add.w	r5, r0, #1
				add r4, r3, #1
  4004c2:	f103 0401 	add.w	r4, r3, #1
				bl isAlive
  4004c6:	f000 f84a 	bl	40055e <isAlive>
				add r2, r4
  4004ca:	4422      	add	r2, r4

			// Below
				add r5, r0, #1
  4004cc:	f100 0501 	add.w	r5, r0, #1
				mov r4, r3
  4004d0:	461c      	mov	r4, r3
				bl isAlive
  4004d2:	f000 f844 	bl	40055e <isAlive>
				add r2, r4
  4004d6:	4422      	add	r2, r4
			// Left 
				mov r5, r0
  4004d8:	4605      	mov	r5, r0
				sub r4, r3, #1
  4004da:	f1a3 0401 	sub.w	r4, r3, #1
				bl isAlive
  4004de:	f000 f83e 	bl	40055e <isAlive>
				add r2, r4
  4004e2:	4422      	add	r2, r4
			//Right 
				mov r5, r0
  4004e4:	4605      	mov	r5, r0
				add r4, r3, #1
  4004e6:	f103 0401 	add.w	r4, r3, #1
				bl isAlive
  4004ea:	f000 f838 	bl	40055e <isAlive>
				add r2, r4
  4004ee:	4422      	add	r2, r4

			// is current square alive? 
				mov r5, r0
  4004f0:	4605      	mov	r5, r0
				mov r4, r3
  4004f2:	461c      	mov	r4, r3
				bl isAlive
  4004f4:	f000 f833 	bl	40055e <isAlive>
				
				cmp r4, #1
  4004f8:	2c01      	cmp	r4, #1
				beq square_is_alive // square is alive
  4004fa:	d00f      	beq.n	40051c <square_is_alive>
									// square is dead
				cmp r2, #3
  4004fc:	2a03      	cmp	r2, #3
				beq dead_eq3
  4004fe:	d006      	beq.n	40050e <dead_eq3>
				// No cases apply, leave node as is

				mov r8, r3
  400500:	4698      	mov	r8, r3
				mov r9, r0
  400502:	4681      	mov	r9, r0
				mov r10, 0
  400504:	f04f 0a00 	mov.w	sl, #0
				bl set_pixel
  400508:	f000 f8e8 	bl	4006dc <set_pixel>
				b  end_of_loop
  40050c:	e01f      	b.n	40054e <end_of_loop>

0040050e <dead_eq3>:

				dead_eq3: 
					mov r8, r3 
  40050e:	4698      	mov	r8, r3
					mov r9, r0
  400510:	4681      	mov	r9, r0
					mov r10, 1
  400512:	f04f 0a01 	mov.w	sl, #1
					bl set_pixel
  400516:	f000 f8e1 	bl	4006dc <set_pixel>
					b end_of_loop
  40051a:	e018      	b.n	40054e <end_of_loop>

0040051c <square_is_alive>:
					

				square_is_alive:
					cmp r2, #2
  40051c:	2a02      	cmp	r2, #2
						blt alive_lt2 
  40051e:	db08      	blt.n	400532 <alive_lt2>
					cmp r2, #3
  400520:	2a03      	cmp	r2, #3
						bgt	alive_gt3
  400522:	dc0d      	bgt.n	400540 <alive_gt3>

						// keep the pixel alive
						mov r8, r3
  400524:	4698      	mov	r8, r3
						mov r9, r0
  400526:	4681      	mov	r9, r0
						mov r10, 1
  400528:	f04f 0a01 	mov.w	sl, #1
						bl set_pixel
  40052c:	f000 f8d6 	bl	4006dc <set_pixel>
						b end_of_loop
  400530:	e00d      	b.n	40054e <end_of_loop>

00400532 <alive_lt2>:

				alive_lt2:
					mov r8, r3
  400532:	4698      	mov	r8, r3
					mov r9, r0
  400534:	4681      	mov	r9, r0
					mov r10, 0
  400536:	f04f 0a00 	mov.w	sl, #0
					bl set_pixel
  40053a:	f000 f8cf 	bl	4006dc <set_pixel>
					b end_of_loop
  40053e:	e006      	b.n	40054e <end_of_loop>

00400540 <alive_gt3>:


				alive_gt3:
					mov r8, r3
  400540:	4698      	mov	r8, r3
					mov r9, r0
  400542:	4681      	mov	r9, r0
					mov r10, 0
  400544:	f04f 0a00 	mov.w	sl, #0
					bl set_pixel
  400548:	f000 f8c8 	bl	4006dc <set_pixel>
					b end_of_loop
  40054c:	e7ff      	b.n	40054e <end_of_loop>

0040054e <end_of_loop>:

				

		end_of_loop:
		add r3, #1
  40054e:	f103 0301 	add.w	r3, r3, #1
		b update_loop2
  400552:	e795      	b.n	400480 <update_loop2>

00400554 <update_end2>:
	update_end2: /////////////////////////////////////////

	add r0, #1
  400554:	f100 0001 	add.w	r0, r0, #1
	b update_loop1
  400558:	e78e      	b.n	400478 <update_loop1>

0040055a <update_end1>:
update_end1: /////////////////////////////////////////

pop {r0,r1,r2,r3,r8,r9,r10,pc}
  40055a:	e8bd 870f 	ldmia.w	sp!, {r0, r1, r2, r3, r8, r9, sl, pc}

0040055e <isAlive>:
*/
.thumb_func 
.global isAlive 
isAlive:

push {r0,r1,r2,lr}
  40055e:	b507      	push	{r0, r1, r2, lr}
cmp r6, #0
  400560:	2e00      	cmp	r6, #0
beq r6_eq_0
  400562:	d01d      	beq.n	4005a0 <r6_eq_0>


cmp r5, #16
  400564:	2d10      	cmp	r5, #16
blt isAlive_case1a		// y < 16
  400566:	db0f      	blt.n	400588 <isAlive_case1a>
sub r0, r5, #16			// y >= 16
  400568:	f1a5 0010 	sub.w	r0, r5, #16
mov r1, #32
  40056c:	f04f 0120 	mov.w	r1, #32
mul r0, r0, r1
  400570:	fb00 f001 	mul.w	r0, r0, r1
add r0, r4
  400574:	4420      	add	r0, r4
ldr r2, =0x20000000
  400576:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
ldrb r1, [r2,r0]
  40057a:	5c11      	ldrb	r1, [r2, r0]
lsr r1, r1, #3
  40057c:	ea4f 01d1 	mov.w	r1, r1, lsr #3
and r1, r1, 0x01 // most signifigant bit
  400580:	f001 0101 	and.w	r1, r1, #1
mov r4, r1
  400584:	460c      	mov	r4, r1
b isAlive_done
  400586:	e02a      	b.n	4005de <isAlive_done>

00400588 <isAlive_case1a>:

isAlive_case1a: 
mov r1, #32
  400588:	f04f 0120 	mov.w	r1, #32
mul r0, r5, r1
  40058c:	fb05 f001 	mul.w	r0, r5, r1
add r0, r4
  400590:	4420      	add	r0, r4

ldr r2, =0x20000000
  400592:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
ldrb r1, [r2,r0]
  400596:	5c11      	ldrb	r1, [r2, r0]
and r1, 0x01
  400598:	f001 0101 	and.w	r1, r1, #1
mov r4,r1
  40059c:	460c      	mov	r4, r1
b isAlive_done
  40059e:	e01e      	b.n	4005de <isAlive_done>

004005a0 <r6_eq_0>:
r6_eq_0: ////////////////////////////////////

cmp r5, #16
  4005a0:	2d10      	cmp	r5, #16
blt isAlive_case1b		// y < 16
  4005a2:	db0f      	blt.n	4005c4 <isAlive_case1b>
sub r0, r5, #16			// y >= 16
  4005a4:	f1a5 0010 	sub.w	r0, r5, #16
mov r1, #32
  4005a8:	f04f 0120 	mov.w	r1, #32
mul r0, r0, r1
  4005ac:	fb00 f001 	mul.w	r0, r0, r1
add r0, r4
  4005b0:	4420      	add	r0, r4
ldr r2, =0x20000000
  4005b2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
ldrb r1, [r2,r0]
  4005b6:	5c11      	ldrb	r1, [r2, r0]
lsr r1, r1, #4
  4005b8:	ea4f 1111 	mov.w	r1, r1, lsr #4
and r1, r1, 0x01 // most signifigant bit
  4005bc:	f001 0101 	and.w	r1, r1, #1
mov r4, r1
  4005c0:	460c      	mov	r4, r1
b isAlive_done
  4005c2:	e00c      	b.n	4005de <isAlive_done>

004005c4 <isAlive_case1b>:

isAlive_case1b: 
mov r1, #32
  4005c4:	f04f 0120 	mov.w	r1, #32
mul r0, r5, r1
  4005c8:	fb05 f001 	mul.w	r0, r5, r1
add r0, r4
  4005cc:	4420      	add	r0, r4
ldr r2, =0x20000000
  4005ce:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
ldrb r1, [r2,r0]
  4005d2:	5c11      	ldrb	r1, [r2, r0]
lsr r1, r1, #1
  4005d4:	ea4f 0151 	mov.w	r1, r1, lsr #1
and r1, 0x01
  4005d8:	f001 0101 	and.w	r1, r1, #1
mov r4,r1
  4005dc:	460c      	mov	r4, r1

004005de <isAlive_done>:



isAlive_done:
pop {r0,r1,r2,pc}
  4005de:	bd07      	pop	{r0, r1, r2, pc}
ldr r9, =grid // Loads grid to avoid optimization
  4005e0:	20000000 	.word	0x20000000

004005e4 <init>:

*/
.thumb_func 
.global init
init: 
push {lr}
  4005e4:	b500      	push	{lr}

	mov r0, #0
  4005e6:	f04f 0000 	mov.w	r0, #0
	mov r1, #17 
  4005ea:	f04f 0111 	mov.w	r1, #17
	bl pioa_dir_set
  4005ee:	f000 f8dc 	bl	4007aa <pioa_dir_set>

	mov r0, #0
  4005f2:	f04f 0000 	mov.w	r0, #0
	mov r1, #24
  4005f6:	f04f 0118 	mov.w	r1, #24
	bl pioa_dir_set
  4005fa:	f000 f8d6 	bl	4007aa <pioa_dir_set>

	mov r0, #0
  4005fe:	f04f 0000 	mov.w	r0, #0
	mov r1, #23
  400602:	f04f 0117 	mov.w	r1, #23
	bl pioa_dir_set
  400606:	f000 f8d0 	bl	4007aa <pioa_dir_set>

	mov r0, #0
  40060a:	f04f 0000 	mov.w	r0, #0
	mov r1, #1
  40060e:	f04f 0101 	mov.w	r1, #1
	bl pioa_dir_set
  400612:	f000 f8ca 	bl	4007aa <pioa_dir_set>

	mov r0, #0
  400616:	f04f 0000 	mov.w	r0, #0
	mov r1, #3
  40061a:	f04f 0103 	mov.w	r1, #3
	bl pioa_dir_set
  40061e:	f000 f8c4 	bl	4007aa <pioa_dir_set>

	mov r0, #0
  400622:	f04f 0000 	mov.w	r0, #0
	mov r1, #21
  400626:	f04f 0115 	mov.w	r1, #21
	bl pioa_dir_set
  40062a:	f000 f8be 	bl	4007aa <pioa_dir_set>

	mov r0, #0
  40062e:	f04f 0000 	mov.w	r0, #0
	mov r1, 25
  400632:	f04f 0119 	mov.w	r1, #25
	bl pioc_dir_set
  400636:	f000 f8e8 	bl	40080a <pioc_dir_set>


	mov r0, #0
  40063a:	f04f 0000 	mov.w	r0, #0
	mov r1, #24
  40063e:	f04f 0118 	mov.w	r1, #24
	bl pioc_dir_set
  400642:	f000 f8e2 	bl	40080a <pioc_dir_set>

	mov r0, #0
  400646:	f04f 0000 	mov.w	r0, #0
	mov r1, #19
  40064a:	f04f 0113 	mov.w	r1, #19
	bl pioc_dir_set
  40064e:	f000 f8dc 	bl	40080a <pioc_dir_set>

	mov r0, #0
  400652:	f04f 0000 	mov.w	r0, #0
	mov r1, #26
  400656:	f04f 011a 	mov.w	r1, #26
	bl pioc_dir_set
  40065a:	f000 f8d6 	bl	40080a <pioc_dir_set>

	mov r0, #0
  40065e:	f04f 0000 	mov.w	r0, #0
	mov r1, #29
  400662:	f04f 011d 	mov.w	r1, #29
	bl pioc_dir_set
  400666:	f000 f8d0 	bl	40080a <pioc_dir_set>

	mov r0, #0
  40066a:	f04f 0000 	mov.w	r0, #0
	mov r1, #21
  40066e:	f04f 0115 	mov.w	r1, #21
	bl pioc_dir_set
  400672:	f000 f8ca 	bl	40080a <pioc_dir_set>

	mov r0, #0
  400676:	f04f 0000 	mov.w	r0, #0
	mov r1, #20
  40067a:	f04f 0114 	mov.w	r1, #20
	bl pioc_dir_set
  40067e:	f000 f8c4 	bl	40080a <pioc_dir_set>

	mov r2, OFF
  400682:	f04f 0200 	mov.w	r2, #0
	bl set_r0
  400686:	f7ff fcf5 	bl	400074 <set_r0>

	mov r2, OFF
  40068a:	f04f 0200 	mov.w	r2, #0
	bl set_g0
  40068e:	f7ff fcf8 	bl	400082 <set_g0>

	mov r2, OFF
  400692:	f04f 0200 	mov.w	r2, #0
	bl set_b0 
  400696:	f7ff fcfb 	bl	400090 <set_b0>

	mov r2, OFF
  40069a:	f04f 0200 	mov.w	r2, #0
	bl set_r1
  40069e:	f7ff fcfe 	bl	40009e <set_r1>

	mov r2,OFF
  4006a2:	f04f 0200 	mov.w	r2, #0
	bl set_g1
  4006a6:	f7ff fd01 	bl	4000ac <set_g1>

	mov r2,OFF
  4006aa:	f04f 0200 	mov.w	r2, #0
	bl set_b1 
  4006ae:	f7ff fd04 	bl	4000ba <set_b1>


pop {pc}
  4006b2:	bd00      	pop	{pc}

004006b4 <load_grid>:
*/
.thumb_func 
.global load_grid
load_grid:

push {r0,r2,r9,r12,lr}
  4006b4:	e92d 5205 	stmdb	sp!, {r0, r2, r9, ip, lr}
ldr r9, = _etext
  4006b8:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 400798 <set_pixel_init+0x6>
mov r0, #0 
  4006bc:	f04f 0000 	mov.w	r0, #0
ldr r2, =0x20000000 
  4006c0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000

004006c4 <notloaded>:
notloaded:
	cmp r0, #512 // (Height/2)*(Width)
  4006c4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
	beq loaded
  4006c8:	d006      	beq.n	4006d8 <loaded>

	ldrb r12, [r9], #1
  4006ca:	f819 cb01 	ldrb.w	ip, [r9], #1
	strb r12, [r2], #1
  4006ce:	f802 cb01 	strb.w	ip, [r2], #1
	add r0, #1
  4006d2:	f100 0001 	add.w	r0, r0, #1
	b notloaded
  4006d6:	e7f5      	b.n	4006c4 <notloaded>

004006d8 <loaded>:

loaded:
pop {r0,r2,r9,r12,pc}
  4006d8:	e8bd 9205 	ldmia.w	sp!, {r0, r2, r9, ip, pc}

004006dc <set_pixel>:

*/
.thumb_func 
.global set_pixel
set_pixel:
push {r0,r1,r2,r3,lr}
  4006dc:	b50f      	push	{r0, r1, r2, r3, lr}
cmp r6, #1
  4006de:	2e01      	cmp	r6, #1
beq gohere
  4006e0:	d02a      	beq.n	400738 <gohere>

cmp r9, #16
  4006e2:	f1b9 0f10 	cmp.w	r9, #16
blt case1		
  4006e6:	db15      	blt.n	400714 <case1>
sub r0, r9, #16	// y >= 16
  4006e8:	f1a9 0010 	sub.w	r0, r9, #16
mov r1, #32
  4006ec:	f04f 0120 	mov.w	r1, #32
mul r0, r0, r1
  4006f0:	fb00 f001 	mul.w	r0, r0, r1
add r0, r8
  4006f4:	4440      	add	r0, r8
ldr r2, =0x20000000
  4006f6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
ldrb r3, [r2,r0]
  4006fa:	5c13      	ldrb	r3, [r2, r0]
and r3, 0x17 // so that r1 actually can change value of 4th bit
  4006fc:	f003 0317 	and.w	r3, r3, #23
and r1, #0
  400700:	f001 0100 	and.w	r1, r1, #0

orr r1, r10
  400704:	ea41 010a 	orr.w	r1, r1, sl

lsl r1, r1, #3
  400708:	ea4f 01c1 	mov.w	r1, r1, lsl #3
orr r1, r3
  40070c:	ea41 0103 	orr.w	r1, r1, r3
strb r1, [r2,r0]
  400710:	5411      	strb	r1, [r2, r0]
b done
  400712:	e03d      	b.n	400790 <done>

00400714 <case1>:

case1: // y < 16
mov r1, #32
  400714:	f04f 0120 	mov.w	r1, #32
mul r0, r9, r1
  400718:	fb09 f001 	mul.w	r0, r9, r1
add r0, r8
  40071c:	4440      	add	r0, r8
and r1, 0 
  40071e:	f001 0100 	and.w	r1, r1, #0
orr r1, r10
  400722:	ea41 010a 	orr.w	r1, r1, sl
ldr r2, =0x20000000
  400726:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
ldrb r3, [r2,r0]
  40072a:	5c13      	ldrb	r3, [r2, r0]
and r3, 0x1E
  40072c:	f003 031e 	and.w	r3, r3, #30
orr r1, r3
  400730:	ea41 0103 	orr.w	r1, r1, r3
strb r1, [r2,r0]
  400734:	5411      	strb	r1, [r2, r0]
b done
  400736:	e02b      	b.n	400790 <done>

00400738 <gohere>:

gohere: 


cmp r9, #16
  400738:	f1b9 0f10 	cmp.w	r9, #16
blt case1b		
  40073c:	db15      	blt.n	40076a <case1b>
sub r0, r9, #16	// y >= 16
  40073e:	f1a9 0010 	sub.w	r0, r9, #16
mov r1, #32
  400742:	f04f 0120 	mov.w	r1, #32
mul r0, r0, r1
  400746:	fb00 f001 	mul.w	r0, r0, r1
add r0, r8
  40074a:	4440      	add	r0, r8

and r1, 0 
  40074c:	f001 0100 	and.w	r1, r1, #0
orr r1, r10
  400750:	ea41 010a 	orr.w	r1, r1, sl
ldr r2, =0x20000000
  400754:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
lsl r1, r1, #4
  400758:	ea4f 1101 	mov.w	r1, r1, lsl #4
ldrb r3, [r2,r0]
  40075c:	5c13      	ldrb	r3, [r2, r0]
and r3, 0x0F
  40075e:	f003 030f 	and.w	r3, r3, #15
orr r1, r3
  400762:	ea41 0103 	orr.w	r1, r1, r3
strb r1, [r2,r0]
  400766:	5411      	strb	r1, [r2, r0]
b done
  400768:	e012      	b.n	400790 <done>

0040076a <case1b>:

case1b: // y < 16
mov r1, #32
  40076a:	f04f 0120 	mov.w	r1, #32
mul r0, r9, r1
  40076e:	fb09 f001 	mul.w	r0, r9, r1
add r0, r8
  400772:	4440      	add	r0, r8
and r1, 0 
  400774:	f001 0100 	and.w	r1, r1, #0
orr r1, r10
  400778:	ea41 010a 	orr.w	r1, r1, sl
ldr r2, =0x20000000
  40077c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
ldrb r3, [r2,r0]
  400780:	5c13      	ldrb	r3, [r2, r0]
and r3, 0x1D
  400782:	f003 031d 	and.w	r3, r3, #29

lsl r1, r1, #1
  400786:	ea4f 0141 	mov.w	r1, r1, lsl #1
orr r1, r3
  40078a:	ea41 0103 	orr.w	r1, r1, r3
strb r1, [r2,r0]
  40078e:	5411      	strb	r1, [r2, r0]

00400790 <done>:


done:
pop {r0,r1,r2,r3,pc}
  400790:	bd0f      	pop	{r0, r1, r2, r3, pc}

00400792 <set_pixel_init>:


.thumb_func 
.global set_pixel_init
set_pixel_init:
push {r0,r1,r2,lr}
  400792:	b507      	push	{r0, r1, r2, lr}

pop {r0,r1,r2,pc}
  400794:	bd07      	pop	{r0, r1, r2, pc}
  400796:	0000      	.short	0x0000
ldr r9, = _etext
  400798:	004009a4 	.word	0x004009a4

0040079c <pioa_init>:
	enable peripheral clock line to PIOC 
*/
.thumb_func
.global pioa_init
pioa_init:		
	ldr r0, =(PMC + 0x10)
  40079c:	4811      	ldr	r0, [pc, #68]	; (4007e4 <end_l+0xe>)
	mov r1, #1
  40079e:	f04f 0101 	mov.w	r1, #1
	lsl r1, r1, PID11
  4007a2:	ea4f 21c1 	mov.w	r1, r1, lsl #11
	str r1, [r0]
  4007a6:	6001      	str	r1, [r0, #0]

	bx lr
  4007a8:	4770      	bx	lr

004007aa <pioa_dir_set>:
	Set PIO Line Direction
*/
.thumb_func
.global pioa_dir_set
pioa_dir_set:	
	cmp r0, OUTPUT_DIR
  4007aa:	2800      	cmp	r0, #0
	bne else_d
  4007ac:	d101      	bne.n	4007b2 <else_d>
	ldr r0, =(PIOA + 0x10) 
  4007ae:	480e      	ldr	r0, [pc, #56]	; (4007e8 <end_l+0x12>)
	b end_d
  4007b0:	e000      	b.n	4007b4 <end_d>

004007b2 <else_d>:
else_d:
	ldr r0, =(PIOA + 0x14) 
  4007b2:	480e      	ldr	r0, [pc, #56]	; (4007ec <end_l+0x16>)

004007b4 <end_d>:
end_d:
	mov r2, #1
  4007b4:	f04f 0201 	mov.w	r2, #1
	lsl r2, r2, r1			
  4007b8:	fa02 f201 	lsl.w	r2, r2, r1
	str r2, [r0]	
  4007bc:	6002      	str	r2, [r0, #0]

004007be <enable_writing>:
enable_writing:
	ldr r0, =(PIOA + 0xA0) 
  4007be:	480c      	ldr	r0, [pc, #48]	; (4007f0 <end_l+0x1a>)
	mov r2, #1
  4007c0:	f04f 0201 	mov.w	r2, #1
	lsl r2, r2, r1
  4007c4:	fa02 f201 	lsl.w	r2, r2, r1
	str r2, [r0]	
  4007c8:	6002      	str	r2, [r0, #0]

	bx lr
  4007ca:	4770      	bx	lr

004007cc <pioa_level_set>:
	Set PIO Line Level  
*/
.thumb_func
.global pioa_level_set
pioa_level_set:
	cmp r0, LEVEL_HIGH
  4007cc:	2801      	cmp	r0, #1
	bne else_l
  4007ce:	d101      	bne.n	4007d4 <else_l>
	ldr r0, =(PIOA + 0x30) 
  4007d0:	4808      	ldr	r0, [pc, #32]	; (4007f4 <end_l+0x1e>)
	b end_l
  4007d2:	e000      	b.n	4007d6 <end_l>

004007d4 <else_l>:
else_l:
	ldr r0, =(PIOA + 0x34) 
  4007d4:	4808      	ldr	r0, [pc, #32]	; (4007f8 <end_l+0x22>)

004007d6 <end_l>:
end_l:
	mov r2, #1
  4007d6:	f04f 0201 	mov.w	r2, #1
	lsl r2, r2, r1  
  4007da:	fa02 f201 	lsl.w	r2, r2, r1
	str r2, [r0]	
  4007de:	6002      	str	r2, [r0, #0]

	bx lr
  4007e0:	4770      	bx	lr
  4007e2:	0000      	.short	0x0000
	ldr r0, =(PMC + 0x10)
  4007e4:	400e0410 	.word	0x400e0410
	ldr r0, =(PIOA + 0x10) 
  4007e8:	400e0e10 	.word	0x400e0e10
	ldr r0, =(PIOA + 0x14) 
  4007ec:	400e0e14 	.word	0x400e0e14
	ldr r0, =(PIOA + 0xA0) 
  4007f0:	400e0ea0 	.word	0x400e0ea0
	ldr r0, =(PIOA + 0x30) 
  4007f4:	400e0e30 	.word	0x400e0e30
	ldr r0, =(PIOA + 0x34) 
  4007f8:	400e0e34 	.word	0x400e0e34

004007fc <pioc_init>:
	enable peripheral clock line to PIOC 
*/
.thumb_func
.global pioc_init
pioc_init:		
	ldr r0, =(PMC + 0x10)
  4007fc:	4811      	ldr	r0, [pc, #68]	; (400844 <end_l+0xe>)
	mov r1, #1
  4007fe:	f04f 0101 	mov.w	r1, #1
	lsl r1, r1, PID13
  400802:	ea4f 3141 	mov.w	r1, r1, lsl #13
	str r1, [r0] /* PCER0.bit13 = 1 */
  400806:	6001      	str	r1, [r0, #0]

	bx lr
  400808:	4770      	bx	lr

0040080a <pioc_dir_set>:
	Set PIO Line Direction
*/
.thumb_func
.global pioc_dir_set
pioc_dir_set:	
	cmp r0, OUTPUT_DIR
  40080a:	2800      	cmp	r0, #0
	bne else_d
  40080c:	d101      	bne.n	400812 <else_d>
	ldr r0, =(PIOC + 0x10) 
  40080e:	480e      	ldr	r0, [pc, #56]	; (400848 <end_l+0x12>)
	b end_d
  400810:	e000      	b.n	400814 <end_d>

00400812 <else_d>:
else_d:
	ldr r0, =(PIOC + 0x14) 
  400812:	480e      	ldr	r0, [pc, #56]	; (40084c <end_l+0x16>)

00400814 <end_d>:
end_d:
	mov r2, #1
  400814:	f04f 0201 	mov.w	r2, #1
	lsl r2, r2, r1			
  400818:	fa02 f201 	lsl.w	r2, r2, r1
	str r2, [r0]	
  40081c:	6002      	str	r2, [r0, #0]

0040081e <enable_writing>:
enable_writing:
	ldr r0, =(PIOC + 0xA0) 
  40081e:	480c      	ldr	r0, [pc, #48]	; (400850 <end_l+0x1a>)
	mov r2, #1
  400820:	f04f 0201 	mov.w	r2, #1
	lsl r2, r2, r1
  400824:	fa02 f201 	lsl.w	r2, r2, r1
	str r2, [r0]	
  400828:	6002      	str	r2, [r0, #0]

	bx lr
  40082a:	4770      	bx	lr

0040082c <pioc_level_set>:
	Set PIO Line Level  
*/
.thumb_func
.global pioc_level_set
pioc_level_set:
	cmp r0, LEVEL_HIGH
  40082c:	2801      	cmp	r0, #1
	bne else_l
  40082e:	d101      	bne.n	400834 <else_l>
	ldr r0, =(PIOC + 0x30) 
  400830:	4808      	ldr	r0, [pc, #32]	; (400854 <end_l+0x1e>)
	b end_l
  400832:	e000      	b.n	400836 <end_l>

00400834 <else_l>:
else_l:
	ldr r0, =(PIOC + 0x34) 
  400834:	4808      	ldr	r0, [pc, #32]	; (400858 <end_l+0x22>)

00400836 <end_l>:
end_l:
	mov r2, #1
  400836:	f04f 0201 	mov.w	r2, #1
	lsl r2, r2, r1  
  40083a:	fa02 f201 	lsl.w	r2, r2, r1
	str r2, [r0]	
  40083e:	6002      	str	r2, [r0, #0]

	bx lr
  400840:	4770      	bx	lr
  400842:	0000      	.short	0x0000
	ldr r0, =(PMC + 0x10)
  400844:	400e0410 	.word	0x400e0410
	ldr r0, =(PIOC + 0x10) 
  400848:	400e1210 	.word	0x400e1210
	ldr r0, =(PIOC + 0x14) 
  40084c:	400e1214 	.word	0x400e1214
	ldr r0, =(PIOC + 0xA0) 
  400850:	400e12a0 	.word	0x400e12a0
	ldr r0, =(PIOC + 0x30) 
  400854:	400e1230 	.word	0x400e1230
	ldr r0, =(PIOC + 0x34) 
  400858:	400e1234 	.word	0x400e1234

0040085c <register_fini>:
  40085c:	4b02      	ldr	r3, [pc, #8]	; (400868 <register_fini+0xc>)
  40085e:	b113      	cbz	r3, 400866 <register_fini+0xa>
  400860:	4802      	ldr	r0, [pc, #8]	; (40086c <register_fini+0x10>)
  400862:	f000 b805 	b.w	400870 <atexit>
  400866:	4770      	bx	lr
  400868:	00000000 	.word	0x00000000
  40086c:	0040087d 	.word	0x0040087d

00400870 <atexit>:
  400870:	2300      	movs	r3, #0
  400872:	4601      	mov	r1, r0
  400874:	461a      	mov	r2, r3
  400876:	4618      	mov	r0, r3
  400878:	f000 b81e 	b.w	4008b8 <__register_exitproc>

0040087c <__libc_fini_array>:
  40087c:	b538      	push	{r3, r4, r5, lr}
  40087e:	4c0a      	ldr	r4, [pc, #40]	; (4008a8 <__libc_fini_array+0x2c>)
  400880:	4d0a      	ldr	r5, [pc, #40]	; (4008ac <__libc_fini_array+0x30>)
  400882:	1b64      	subs	r4, r4, r5
  400884:	10a4      	asrs	r4, r4, #2
  400886:	d00a      	beq.n	40089e <__libc_fini_array+0x22>
  400888:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40088c:	3b01      	subs	r3, #1
  40088e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  400892:	3c01      	subs	r4, #1
  400894:	f855 3904 	ldr.w	r3, [r5], #-4
  400898:	4798      	blx	r3
  40089a:	2c00      	cmp	r4, #0
  40089c:	d1f9      	bne.n	400892 <__libc_fini_array+0x16>
  40089e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4008a2:	f000 b877 	b.w	400994 <_fini>
  4008a6:	bf00      	nop
  4008a8:	004009a4 	.word	0x004009a4
  4008ac:	004009a0 	.word	0x004009a0

004008b0 <__retarget_lock_acquire_recursive>:
  4008b0:	4770      	bx	lr
  4008b2:	bf00      	nop

004008b4 <__retarget_lock_release_recursive>:
  4008b4:	4770      	bx	lr
  4008b6:	bf00      	nop

004008b8 <__register_exitproc>:
  4008b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4008bc:	4d2c      	ldr	r5, [pc, #176]	; (400970 <__register_exitproc+0xb8>)
  4008be:	4606      	mov	r6, r0
  4008c0:	6828      	ldr	r0, [r5, #0]
  4008c2:	4698      	mov	r8, r3
  4008c4:	460f      	mov	r7, r1
  4008c6:	4691      	mov	r9, r2
  4008c8:	f7ff fff2 	bl	4008b0 <__retarget_lock_acquire_recursive>
  4008cc:	4b29      	ldr	r3, [pc, #164]	; (400974 <__register_exitproc+0xbc>)
  4008ce:	681c      	ldr	r4, [r3, #0]
  4008d0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4008d4:	2b00      	cmp	r3, #0
  4008d6:	d03e      	beq.n	400956 <__register_exitproc+0x9e>
  4008d8:	685a      	ldr	r2, [r3, #4]
  4008da:	2a1f      	cmp	r2, #31
  4008dc:	dc1c      	bgt.n	400918 <__register_exitproc+0x60>
  4008de:	f102 0e01 	add.w	lr, r2, #1
  4008e2:	b176      	cbz	r6, 400902 <__register_exitproc+0x4a>
  4008e4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4008e8:	2401      	movs	r4, #1
  4008ea:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4008ee:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4008f2:	4094      	lsls	r4, r2
  4008f4:	4320      	orrs	r0, r4
  4008f6:	2e02      	cmp	r6, #2
  4008f8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4008fc:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  400900:	d023      	beq.n	40094a <__register_exitproc+0x92>
  400902:	3202      	adds	r2, #2
  400904:	f8c3 e004 	str.w	lr, [r3, #4]
  400908:	6828      	ldr	r0, [r5, #0]
  40090a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40090e:	f7ff ffd1 	bl	4008b4 <__retarget_lock_release_recursive>
  400912:	2000      	movs	r0, #0
  400914:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400918:	4b17      	ldr	r3, [pc, #92]	; (400978 <__register_exitproc+0xc0>)
  40091a:	b30b      	cbz	r3, 400960 <__register_exitproc+0xa8>
  40091c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  400920:	f3af 8000 	nop.w
  400924:	4603      	mov	r3, r0
  400926:	b1d8      	cbz	r0, 400960 <__register_exitproc+0xa8>
  400928:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40092c:	6002      	str	r2, [r0, #0]
  40092e:	2100      	movs	r1, #0
  400930:	6041      	str	r1, [r0, #4]
  400932:	460a      	mov	r2, r1
  400934:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  400938:	f04f 0e01 	mov.w	lr, #1
  40093c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  400940:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  400944:	2e00      	cmp	r6, #0
  400946:	d0dc      	beq.n	400902 <__register_exitproc+0x4a>
  400948:	e7cc      	b.n	4008e4 <__register_exitproc+0x2c>
  40094a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40094e:	430c      	orrs	r4, r1
  400950:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  400954:	e7d5      	b.n	400902 <__register_exitproc+0x4a>
  400956:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40095a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40095e:	e7bb      	b.n	4008d8 <__register_exitproc+0x20>
  400960:	6828      	ldr	r0, [r5, #0]
  400962:	f7ff ffa7 	bl	4008b4 <__retarget_lock_release_recursive>
  400966:	f04f 30ff 	mov.w	r0, #4294967295
  40096a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40096e:	bf00      	nop
  400970:	20000828 	.word	0x20000828
  400974:	0040097c 	.word	0x0040097c
  400978:	00000000 	.word	0x00000000

0040097c <_global_impure_ptr>:
  40097c:	20000400                                ... 

00400980 <_init>:
  400980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400982:	bf00      	nop
  400984:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400986:	bc08      	pop	{r3}
  400988:	469e      	mov	lr, r3
  40098a:	4770      	bx	lr

0040098c <__init_array_start>:
  40098c:	0040085d 	.word	0x0040085d

00400990 <__frame_dummy_init_array_entry>:
  400990:	0040002d                                -.@.

00400994 <_fini>:
  400994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400996:	bf00      	nop
  400998:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40099a:	bc08      	pop	{r3}
  40099c:	469e      	mov	lr, r3
  40099e:	4770      	bx	lr

004009a0 <__fini_array_start>:
  4009a0:	00400009 	.word	0x00400009


SAM4S Xpro Bare Metal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000774  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000082c  20000000  00400774  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  2000082c  00400fa0  0002082c  2**2
                  ALLOC
  3 .stack        00003004  2000086c  00400fe0  0002082c  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  0002082c  2**0
                  CONTENTS, READONLY
  5 .debug_line   00000320  00000000  00000000  00020856  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000002dc  00000000  00000000  00020b76  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000064  00000000  00000000  00020e52  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000000a0  00000000  00000000  00020eb8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000194  00000000  00000000  00020f58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20003870 	.word	0x20003870
  400004:	0040012d 	.word	0x0040012d

00400008 <__do_global_dtors_aux>:
  400008:	b510      	push	{r4, lr}
  40000a:	4c05      	ldr	r4, [pc, #20]	; (400020 <__do_global_dtors_aux+0x18>)
  40000c:	7823      	ldrb	r3, [r4, #0]
  40000e:	b933      	cbnz	r3, 40001e <__do_global_dtors_aux+0x16>
  400010:	4b04      	ldr	r3, [pc, #16]	; (400024 <__do_global_dtors_aux+0x1c>)
  400012:	b113      	cbz	r3, 40001a <__do_global_dtors_aux+0x12>
  400014:	4804      	ldr	r0, [pc, #16]	; (400028 <__do_global_dtors_aux+0x20>)
  400016:	f3af 8000 	nop.w
  40001a:	2301      	movs	r3, #1
  40001c:	7023      	strb	r3, [r4, #0]
  40001e:	bd10      	pop	{r4, pc}
  400020:	2000082c 	.word	0x2000082c
  400024:	00000000 	.word	0x00000000
  400028:	00400774 	.word	0x00400774

0040002c <frame_dummy>:
  40002c:	4b0c      	ldr	r3, [pc, #48]	; (400060 <frame_dummy+0x34>)
  40002e:	b143      	cbz	r3, 400042 <frame_dummy+0x16>
  400030:	480c      	ldr	r0, [pc, #48]	; (400064 <frame_dummy+0x38>)
  400032:	490d      	ldr	r1, [pc, #52]	; (400068 <frame_dummy+0x3c>)
  400034:	b510      	push	{r4, lr}
  400036:	f3af 8000 	nop.w
  40003a:	480c      	ldr	r0, [pc, #48]	; (40006c <frame_dummy+0x40>)
  40003c:	6803      	ldr	r3, [r0, #0]
  40003e:	b923      	cbnz	r3, 40004a <frame_dummy+0x1e>
  400040:	bd10      	pop	{r4, pc}
  400042:	480a      	ldr	r0, [pc, #40]	; (40006c <frame_dummy+0x40>)
  400044:	6803      	ldr	r3, [r0, #0]
  400046:	b933      	cbnz	r3, 400056 <frame_dummy+0x2a>
  400048:	4770      	bx	lr
  40004a:	4b09      	ldr	r3, [pc, #36]	; (400070 <frame_dummy+0x44>)
  40004c:	2b00      	cmp	r3, #0
  40004e:	d0f7      	beq.n	400040 <frame_dummy+0x14>
  400050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400054:	4718      	bx	r3
  400056:	4b06      	ldr	r3, [pc, #24]	; (400070 <frame_dummy+0x44>)
  400058:	2b00      	cmp	r3, #0
  40005a:	d0f5      	beq.n	400048 <frame_dummy+0x1c>
  40005c:	4718      	bx	r3
  40005e:	bf00      	nop
  400060:	00000000 	.word	0x00000000
  400064:	00400774 	.word	0x00400774
  400068:	20000830 	.word	0x20000830
  40006c:	00400774 	.word	0x00400774
  400070:	00000000 	.word	0x00000000

00400074 <set_r0>:
  400074:	b503      	push	{r0, r1, lr}
  400076:	4610      	mov	r0, r2
  400078:	f04f 0111 	mov.w	r1, #17
  40007c:	f000 fa8e 	bl	40059c <pioa_level_set>
  400080:	bd03      	pop	{r0, r1, pc}

00400082 <set_g0>:
  400082:	b503      	push	{r0, r1, lr}
  400084:	4610      	mov	r0, r2
  400086:	f04f 0118 	mov.w	r1, #24
  40008a:	f000 fa87 	bl	40059c <pioa_level_set>
  40008e:	bd03      	pop	{r0, r1, pc}

00400090 <set_b0>:
  400090:	b503      	push	{r0, r1, lr}
  400092:	4610      	mov	r0, r2
  400094:	f04f 0117 	mov.w	r1, #23
  400098:	f000 fa80 	bl	40059c <pioa_level_set>
  40009c:	bd03      	pop	{r0, r1, pc}

0040009e <set_r1>:
  40009e:	b503      	push	{r0, r1, lr}
  4000a0:	4610      	mov	r0, r2
  4000a2:	f04f 0101 	mov.w	r1, #1
  4000a6:	f000 fa79 	bl	40059c <pioa_level_set>
  4000aa:	bd03      	pop	{r0, r1, pc}

004000ac <set_g1>:
  4000ac:	b503      	push	{r0, r1, lr}
  4000ae:	4610      	mov	r0, r2
  4000b0:	f04f 0103 	mov.w	r1, #3
  4000b4:	f000 fa72 	bl	40059c <pioa_level_set>
  4000b8:	bd03      	pop	{r0, r1, pc}

004000ba <set_b1>:
  4000ba:	b503      	push	{r0, r1, lr}
  4000bc:	4610      	mov	r0, r2
  4000be:	f04f 0115 	mov.w	r1, #21
  4000c2:	f000 fa6b 	bl	40059c <pioa_level_set>
  4000c6:	bd03      	pop	{r0, r1, pc}

004000c8 <set_a0>:
  4000c8:	b503      	push	{r0, r1, lr}
  4000ca:	4610      	mov	r0, r2
  4000cc:	f04f 0119 	mov.w	r1, #25
  4000d0:	f000 fa94 	bl	4005fc <pioc_level_set>
  4000d4:	bd03      	pop	{r0, r1, pc}

004000d6 <set_a1>:
  4000d6:	b503      	push	{r0, r1, lr}
  4000d8:	4610      	mov	r0, r2
  4000da:	f04f 0118 	mov.w	r1, #24
  4000de:	f000 fa8d 	bl	4005fc <pioc_level_set>
  4000e2:	bd03      	pop	{r0, r1, pc}

004000e4 <set_a2>:
  4000e4:	b503      	push	{r0, r1, lr}
  4000e6:	4610      	mov	r0, r2
  4000e8:	f04f 0113 	mov.w	r1, #19
  4000ec:	f000 fa86 	bl	4005fc <pioc_level_set>
  4000f0:	bd03      	pop	{r0, r1, pc}

004000f2 <set_a3>:
  4000f2:	b503      	push	{r0, r1, lr}
  4000f4:	4610      	mov	r0, r2
  4000f6:	f04f 011a 	mov.w	r1, #26
  4000fa:	f000 fa7f 	bl	4005fc <pioc_level_set>
  4000fe:	bd03      	pop	{r0, r1, pc}

00400100 <set_clk>:
  400100:	b503      	push	{r0, r1, lr}
  400102:	4610      	mov	r0, r2
  400104:	f04f 011d 	mov.w	r1, #29
  400108:	f000 fa78 	bl	4005fc <pioc_level_set>
  40010c:	bd03      	pop	{r0, r1, pc}

0040010e <set_stb>:
  40010e:	b503      	push	{r0, r1, lr}
  400110:	4610      	mov	r0, r2
  400112:	f04f 0115 	mov.w	r1, #21
  400116:	f000 fa71 	bl	4005fc <pioc_level_set>
  40011a:	bd03      	pop	{r0, r1, pc}

0040011c <set_oe>:
  40011c:	b503      	push	{r0, r1, lr}
  40011e:	4610      	mov	r0, r2
  400120:	f04f 0114 	mov.w	r1, #20
  400124:	f000 fa6a 	bl	4005fc <pioc_level_set>
  400128:	bd03      	pop	{r0, r1, pc}
	...

0040012c <main>:

.section .text
.thumb_func
.global main
main:
ldr r9, =grid // Loads grid to avoid optimization
  40012c:	f8df 9280 	ldr.w	r9, [pc, #640]	; 4003b0 <isAlive_done+0x2>
bl init
  400130:	f000 f940 	bl	4003b4 <init>

bl load_grid
  400134:	f000 f9a6 	bl	400484 <load_grid>
mov r6, #0 // {r0} must be set to zero at the start
  400138:	f04f 0600 	mov.w	r6, #0

mov r8, #4
  40013c:	f04f 0804 	mov.w	r8, #4
mov r9, #25
  400140:	f04f 0919 	mov.w	r9, #25
mov r10, #1
  400144:	f04f 0a01 	mov.w	sl, #1
bl set_pixel
  400148:	f000 f9b0 	bl	4004ac <set_pixel>


mov r8, #5
  40014c:	f04f 0805 	mov.w	r8, #5
mov r9, #25
  400150:	f04f 0919 	mov.w	r9, #25
mov r10, #1
  400154:	f04f 0a01 	mov.w	sl, #1
bl set_pixel
  400158:	f000 f9a8 	bl	4004ac <set_pixel>



mov r8, #6
  40015c:	f04f 0806 	mov.w	r8, #6
mov r9, #25
  400160:	f04f 0919 	mov.w	r9, #25
mov r10, #1
  400164:	f04f 0a01 	mov.w	sl, #1
bl set_pixel
  400168:	f000 f9a0 	bl	4004ac <set_pixel>

0040016c <update_grid>:
mov r9, #18
mov r10, #1
bl set_pixel*/

update_grid:
cmp r6, #0
  40016c:	2e00      	cmp	r6, #0
beq set_to_1
  40016e:	d002      	beq.n	400176 <set_to_1>
mov r6, #0
  400170:	f04f 0600 	mov.w	r6, #0
b rickroll
  400174:	e001      	b.n	40017a <rickroll>

00400176 <set_to_1>:
set_to_1:
mov r6, #1
  400176:	f04f 0601 	mov.w	r6, #1

0040017a <rickroll>:
rickroll:
mov r12, 0
  40017a:	f04f 0c00 	mov.w	ip, #0
bl update
  40017e:	f000 f85d 	bl	40023c <update>

00400182 <main2>:


main2:
mov r11, 0xFF
  400182:	f04f 0bff 	mov.w	fp, #255	; 0xff
cmp r12, r11
  400186:	45dc      	cmp	ip, fp
beq update_grid
  400188:	d0f0      	beq.n	40016c <update_grid>
add r12, #1
  40018a:	f10c 0c01 	add.w	ip, ip, #1

mov r7, #0
  40018e:	f04f 0700 	mov.w	r7, #0

00400192 <loop1>:
loop1: 
cmp r7, #16
  400192:	2f10      	cmp	r7, #16
beq end1
  400194:	d051      	beq.n	40023a <end1>
mov r3, #0
  400196:	f04f 0300 	mov.w	r3, #0

mov r4, #32
  40019a:	f04f 0420 	mov.w	r4, #32
mul r4, r7, r4  // r4 = row * matrix_width = row*32
  40019e:	fb07 f404 	mul.w	r4, r7, r4

004001a2 <loop2>:

	loop2: 
		cmp r3, #32
  4001a2:	2b20      	cmp	r3, #32
		beq end2
  4001a4:	d020      	beq.n	4001e8 <end2>
		
		add r5, r4, r3
  4001a6:	eb04 0503 	add.w	r5, r4, r3
		
		ldr r1,  =0x20000000 
  4001aa:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
		ldrb r1, [r1,r5]
  4001ae:	5d49      	ldrb	r1, [r1, r5]

		mov r9, r6
  4001b0:	46b1      	mov	r9, r6
		mov r2, r1
  4001b2:	460a      	mov	r2, r1
		lsr r2,r2, r9
  4001b4:	fa22 f209 	lsr.w	r2, r2, r9
		and r2, 0x01
  4001b8:	f002 0201 	and.w	r2, r2, #1
		bl set_r0
  4001bc:	f7ff ff5a 	bl	400074 <set_r0>
		
		add r9, r6, #3
  4001c0:	f106 0903 	add.w	r9, r6, #3
		mov r2, r1
  4001c4:	460a      	mov	r2, r1
		lsr r2,r2, r9
  4001c6:	fa22 f209 	lsr.w	r2, r2, r9
		and r2, #1
  4001ca:	f002 0201 	and.w	r2, r2, #1
		bl set_r1
  4001ce:	f7ff ff66 	bl	40009e <set_r1>
	

		mov r2, ON
  4001d2:	f04f 0201 	mov.w	r2, #1
		bl set_clk
  4001d6:	f7ff ff93 	bl	400100 <set_clk>

		mov r2, OFF
  4001da:	f04f 0200 	mov.w	r2, #0
		bl set_clk
  4001de:	f7ff ff8f 	bl	400100 <set_clk>

		add r3, #1
  4001e2:	f103 0301 	add.w	r3, r3, #1
		b loop2
  4001e6:	e7dc      	b.n	4001a2 <loop2>

004001e8 <end2>:
	end2: 

mov r2, ON
  4001e8:	f04f 0201 	mov.w	r2, #1
 bl set_oe
  4001ec:	f7ff ff96 	bl	40011c <set_oe>
	a1 = c
	a2 = b
	a3 = a
*/

and r2, r7, #1
  4001f0:	f007 0201 	and.w	r2, r7, #1
bl set_a0 
  4001f4:	f7ff ff68 	bl	4000c8 <set_a0>

lsr r5, r7, #1
  4001f8:	ea4f 0557 	mov.w	r5, r7, lsr #1
and r2, r5, #1
  4001fc:	f005 0201 	and.w	r2, r5, #1
bl set_a1
  400200:	f7ff ff69 	bl	4000d6 <set_a1>

lsr r5, r7, #2
  400204:	ea4f 0597 	mov.w	r5, r7, lsr #2
and  r2, r5, #1
  400208:	f005 0201 	and.w	r2, r5, #1
bl set_a2
  40020c:	f7ff ff6a 	bl	4000e4 <set_a2>

lsr r5, r7, #3
  400210:	ea4f 05d7 	mov.w	r5, r7, lsr #3
and r2, r5, #1
  400214:	f005 0201 	and.w	r2, r5, #1
bl set_a3
  400218:	f7ff ff6b 	bl	4000f2 <set_a3>


mov r2, ON
  40021c:	f04f 0201 	mov.w	r2, #1
bl set_stb
  400220:	f7ff ff75 	bl	40010e <set_stb>

mov r2, OFF
  400224:	f04f 0200 	mov.w	r2, #0
bl set_stb
  400228:	f7ff ff71 	bl	40010e <set_stb>

mov r2, OFF
  40022c:	f04f 0200 	mov.w	r2, #0
bl set_oe 
  400230:	f7ff ff74 	bl	40011c <set_oe>


add r7, #1
  400234:	f107 0701 	add.w	r7, r7, #1
b loop1
  400238:	e7ab      	b.n	400192 <loop1>

0040023a <end1>:
end1: 
b main2 
  40023a:	e7a2      	b.n	400182 <main2>

0040023c <update>:


.thumb_func
.global update 
update:
push {r0,r1,r2,r3,r8,r9,r10,lr}
  40023c:	e92d 470f 	stmdb	sp!, {r0, r1, r2, r3, r8, r9, sl, lr}
mov r0, #1// CHANGE BACK TO 1 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  400240:	f04f 0001 	mov.w	r0, #1
mov r3, 1
  400244:	f04f 0301 	mov.w	r3, #1

00400248 <update_loop1>:
*/


update_loop1: /////////////////////////////////////////

	cmp r0, #30
  400248:	281e      	cmp	r0, #30
	beq update_end1
  40024a:	d06e      	beq.n	40032a <update_end1>
	mov r3, #1
  40024c:	f04f 0301 	mov.w	r3, #1

00400250 <update_loop2>:

	update_loop2: /////////////////////////////////////////
		cmp r3, #30
  400250:	2b1e      	cmp	r3, #30
		beq update_end2
  400252:	d067      	beq.n	400324 <update_end2>

			// Find number of neighbours alive
			mov r2, #0
  400254:	f04f 0200 	mov.w	r2, #0
			// r5 Y
			// r4 X
			// Top Left

				sub r5, r0, #1
  400258:	f1a0 0501 	sub.w	r5, r0, #1
				sub r4, r3, #1
  40025c:	f1a3 0401 	sub.w	r4, r3, #1
				bl isAlive
  400260:	f000 f865 	bl	40032e <isAlive>
				add r2, r4
  400264:	4422      	add	r2, r4
			// Above 
				sub r5, r0, #1
  400266:	f1a0 0501 	sub.w	r5, r0, #1
				mov r4, r3
  40026a:	461c      	mov	r4, r3
				bl isAlive
  40026c:	f000 f85f 	bl	40032e <isAlive>
				add r2, r4 
  400270:	4422      	add	r2, r4
			// Top Right 
				sub r5, r0, #1
  400272:	f1a0 0501 	sub.w	r5, r0, #1
				add r4, r3, #1
  400276:	f103 0401 	add.w	r4, r3, #1
				bl isAlive
  40027a:	f000 f858 	bl	40032e <isAlive>
				add r2, r4
  40027e:	4422      	add	r2, r4

			// Bottom Left
				add r5, r0, #1
  400280:	f100 0501 	add.w	r5, r0, #1
				sub r4, r3, #1
  400284:	f1a3 0401 	sub.w	r4, r3, #1
				bl isAlive
  400288:	f000 f851 	bl	40032e <isAlive>
				add r2, r4
  40028c:	4422      	add	r2, r4

			// Bottom Right 
				add r5, r0, #1
  40028e:	f100 0501 	add.w	r5, r0, #1
				add r4, r3, #1
  400292:	f103 0401 	add.w	r4, r3, #1
				bl isAlive
  400296:	f000 f84a 	bl	40032e <isAlive>
				add r2, r4
  40029a:	4422      	add	r2, r4

			// Below
				add r5, r0, #1
  40029c:	f100 0501 	add.w	r5, r0, #1
				mov r4, r3
  4002a0:	461c      	mov	r4, r3
				bl isAlive
  4002a2:	f000 f844 	bl	40032e <isAlive>
				add r2, r4
  4002a6:	4422      	add	r2, r4
			// Left 
				mov r5, r0
  4002a8:	4605      	mov	r5, r0
				sub r4, r3, #1
  4002aa:	f1a3 0401 	sub.w	r4, r3, #1
				bl isAlive
  4002ae:	f000 f83e 	bl	40032e <isAlive>
				add r2, r4
  4002b2:	4422      	add	r2, r4
			//Right 
				mov r5, r0
  4002b4:	4605      	mov	r5, r0
				add r4, r3, #1
  4002b6:	f103 0401 	add.w	r4, r3, #1
				bl isAlive
  4002ba:	f000 f838 	bl	40032e <isAlive>
				add r2, r4
  4002be:	4422      	add	r2, r4

			// is current square alive? 
				mov r5, r0
  4002c0:	4605      	mov	r5, r0
				mov r4, r3
  4002c2:	461c      	mov	r4, r3
				bl isAlive
  4002c4:	f000 f833 	bl	40032e <isAlive>
				
				cmp r4, #1
  4002c8:	2c01      	cmp	r4, #1
				beq square_is_alive // square is alive
  4002ca:	d00f      	beq.n	4002ec <square_is_alive>
									// square is dead
				cmp r2, #3
  4002cc:	2a03      	cmp	r2, #3
				beq dead_eq3
  4002ce:	d006      	beq.n	4002de <dead_eq3>
				// No cases apply, leave node as is

				mov r8, r3
  4002d0:	4698      	mov	r8, r3
				mov r9, r0
  4002d2:	4681      	mov	r9, r0
				mov r10, 0
  4002d4:	f04f 0a00 	mov.w	sl, #0
				bl set_pixel
  4002d8:	f000 f8e8 	bl	4004ac <set_pixel>
				b  end_of_loop
  4002dc:	e01f      	b.n	40031e <end_of_loop>

004002de <dead_eq3>:

				dead_eq3: 
					mov r8, r3
  4002de:	4698      	mov	r8, r3
					mov r9, r0
  4002e0:	4681      	mov	r9, r0
					mov r10, 1
  4002e2:	f04f 0a01 	mov.w	sl, #1
					bl set_pixel
  4002e6:	f000 f8e1 	bl	4004ac <set_pixel>
					b end_of_loop
  4002ea:	e018      	b.n	40031e <end_of_loop>

004002ec <square_is_alive>:
					

				square_is_alive:
					cmp r2, #2
  4002ec:	2a02      	cmp	r2, #2
						blt alive_lt2 
  4002ee:	db08      	blt.n	400302 <alive_lt2>
					cmp r2, #3
  4002f0:	2a03      	cmp	r2, #3
						bgt	alive_gt3
  4002f2:	dc0d      	bgt.n	400310 <alive_gt3>

						// keep the pixel alive
						mov r8, r3
  4002f4:	4698      	mov	r8, r3
						mov r9, r0
  4002f6:	4681      	mov	r9, r0
						mov r10, 1
  4002f8:	f04f 0a01 	mov.w	sl, #1
						bl set_pixel
  4002fc:	f000 f8d6 	bl	4004ac <set_pixel>
						b end_of_loop
  400300:	e00d      	b.n	40031e <end_of_loop>

00400302 <alive_lt2>:

				alive_lt2:
					mov r8, r3
  400302:	4698      	mov	r8, r3
					mov r9, r0
  400304:	4681      	mov	r9, r0
					mov r10, 0
  400306:	f04f 0a00 	mov.w	sl, #0
					bl set_pixel
  40030a:	f000 f8cf 	bl	4004ac <set_pixel>
					b end_of_loop
  40030e:	e006      	b.n	40031e <end_of_loop>

00400310 <alive_gt3>:


				alive_gt3:
					mov r8, r3
  400310:	4698      	mov	r8, r3
					mov r9, r0
  400312:	4681      	mov	r9, r0
					mov r10, 0
  400314:	f04f 0a00 	mov.w	sl, #0
					bl set_pixel
  400318:	f000 f8c8 	bl	4004ac <set_pixel>
					b end_of_loop
  40031c:	e7ff      	b.n	40031e <end_of_loop>

0040031e <end_of_loop>:

				

		end_of_loop:
		add r3, #1
  40031e:	f103 0301 	add.w	r3, r3, #1
		b update_loop2
  400322:	e795      	b.n	400250 <update_loop2>

00400324 <update_end2>:
	update_end2: /////////////////////////////////////////

	add r0, #1
  400324:	f100 0001 	add.w	r0, r0, #1
	b update_loop1
  400328:	e78e      	b.n	400248 <update_loop1>

0040032a <update_end1>:
update_end1: /////////////////////////////////////////

pop {r0,r1,r2,r3,r8,r9,r10,pc}
  40032a:	e8bd 870f 	ldmia.w	sp!, {r0, r1, r2, r3, r8, r9, sl, pc}

0040032e <isAlive>:
*/
.thumb_func 
.global isAlive 
isAlive:

push {r0,r1,r2,lr}
  40032e:	b507      	push	{r0, r1, r2, lr}
cmp r6, #0
  400330:	2e00      	cmp	r6, #0
beq r6_eq_0
  400332:	d01d      	beq.n	400370 <r6_eq_0>


cmp r5, #16
  400334:	2d10      	cmp	r5, #16
blt isAlive_case1a		// y < 16
  400336:	db0f      	blt.n	400358 <isAlive_case1a>
sub r0, r5, #16			// y >= 16
  400338:	f1a5 0010 	sub.w	r0, r5, #16
mov r1, #32
  40033c:	f04f 0120 	mov.w	r1, #32
mul r0, r0, r1
  400340:	fb00 f001 	mul.w	r0, r0, r1
add r0, r4
  400344:	4420      	add	r0, r4
ldr r2, =0x20000000
  400346:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
ldrb r1, [r2,r0]
  40034a:	5c11      	ldrb	r1, [r2, r0]
lsr r1, r1, #3
  40034c:	ea4f 01d1 	mov.w	r1, r1, lsr #3
and r1, r1, 0x01 // most signifigant bit
  400350:	f001 0101 	and.w	r1, r1, #1
mov r4, r1
  400354:	460c      	mov	r4, r1
b isAlive_done
  400356:	e02a      	b.n	4003ae <isAlive_done>

00400358 <isAlive_case1a>:

isAlive_case1a: 
mov r1, #32
  400358:	f04f 0120 	mov.w	r1, #32
mul r0, r5, r1
  40035c:	fb05 f001 	mul.w	r0, r5, r1
add r0, r4
  400360:	4420      	add	r0, r4

ldr r2, =0x20000000
  400362:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
ldrb r1, [r2,r0]
  400366:	5c11      	ldrb	r1, [r2, r0]
and r1, 0x01
  400368:	f001 0101 	and.w	r1, r1, #1
mov r4,r1
  40036c:	460c      	mov	r4, r1
b isAlive_done
  40036e:	e01e      	b.n	4003ae <isAlive_done>

00400370 <r6_eq_0>:
r6_eq_0: ////////////////////////////////////

cmp r5, #16
  400370:	2d10      	cmp	r5, #16
blt isAlive_case1b		// y < 16
  400372:	db0f      	blt.n	400394 <isAlive_case1b>
sub r0, r5, #16			// y >= 16
  400374:	f1a5 0010 	sub.w	r0, r5, #16
mov r1, #32
  400378:	f04f 0120 	mov.w	r1, #32
mul r0, r0, r1
  40037c:	fb00 f001 	mul.w	r0, r0, r1
add r0, r4
  400380:	4420      	add	r0, r4
ldr r2, =0x20000000
  400382:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
ldrb r1, [r2,r0]
  400386:	5c11      	ldrb	r1, [r2, r0]
lsr r1, r1, #4
  400388:	ea4f 1111 	mov.w	r1, r1, lsr #4
and r1, r1, 0x01 // most signifigant bit
  40038c:	f001 0101 	and.w	r1, r1, #1
mov r4, r1
  400390:	460c      	mov	r4, r1
b isAlive_done
  400392:	e00c      	b.n	4003ae <isAlive_done>

00400394 <isAlive_case1b>:

isAlive_case1b: 
mov r1, #32
  400394:	f04f 0120 	mov.w	r1, #32
mul r0, r5, r1
  400398:	fb05 f001 	mul.w	r0, r5, r1
add r0, r4
  40039c:	4420      	add	r0, r4
ldr r2, =0x20000000
  40039e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
ldrb r1, [r2,r0]
  4003a2:	5c11      	ldrb	r1, [r2, r0]
lsr r1, r1, #1
  4003a4:	ea4f 0151 	mov.w	r1, r1, lsr #1
and r1, 0x01
  4003a8:	f001 0101 	and.w	r1, r1, #1
mov r4,r1
  4003ac:	460c      	mov	r4, r1

004003ae <isAlive_done>:



isAlive_done:
pop {r0,r1,r2,pc}
  4003ae:	bd07      	pop	{r0, r1, r2, pc}
ldr r9, =grid // Loads grid to avoid optimization
  4003b0:	20000000 	.word	0x20000000

004003b4 <init>:

*/
.thumb_func 
.global init
init: 
push {lr}
  4003b4:	b500      	push	{lr}

	mov r0, #0
  4003b6:	f04f 0000 	mov.w	r0, #0
	mov r1, #17 
  4003ba:	f04f 0111 	mov.w	r1, #17
	bl pioa_dir_set
  4003be:	f000 f8dc 	bl	40057a <pioa_dir_set>

	mov r0, #0
  4003c2:	f04f 0000 	mov.w	r0, #0
	mov r1, #24
  4003c6:	f04f 0118 	mov.w	r1, #24
	bl pioa_dir_set
  4003ca:	f000 f8d6 	bl	40057a <pioa_dir_set>

	mov r0, #0
  4003ce:	f04f 0000 	mov.w	r0, #0
	mov r1, #23
  4003d2:	f04f 0117 	mov.w	r1, #23
	bl pioa_dir_set
  4003d6:	f000 f8d0 	bl	40057a <pioa_dir_set>

	mov r0, #0
  4003da:	f04f 0000 	mov.w	r0, #0
	mov r1, #1
  4003de:	f04f 0101 	mov.w	r1, #1
	bl pioa_dir_set
  4003e2:	f000 f8ca 	bl	40057a <pioa_dir_set>

	mov r0, #0
  4003e6:	f04f 0000 	mov.w	r0, #0
	mov r1, #3
  4003ea:	f04f 0103 	mov.w	r1, #3
	bl pioa_dir_set
  4003ee:	f000 f8c4 	bl	40057a <pioa_dir_set>

	mov r0, #0
  4003f2:	f04f 0000 	mov.w	r0, #0
	mov r1, #21
  4003f6:	f04f 0115 	mov.w	r1, #21
	bl pioa_dir_set
  4003fa:	f000 f8be 	bl	40057a <pioa_dir_set>

	mov r0, #0
  4003fe:	f04f 0000 	mov.w	r0, #0
	mov r1, 25
  400402:	f04f 0119 	mov.w	r1, #25
	bl pioc_dir_set
  400406:	f000 f8e8 	bl	4005da <pioc_dir_set>


	mov r0, #0
  40040a:	f04f 0000 	mov.w	r0, #0
	mov r1, #24
  40040e:	f04f 0118 	mov.w	r1, #24
	bl pioc_dir_set
  400412:	f000 f8e2 	bl	4005da <pioc_dir_set>

	mov r0, #0
  400416:	f04f 0000 	mov.w	r0, #0
	mov r1, #19
  40041a:	f04f 0113 	mov.w	r1, #19
	bl pioc_dir_set
  40041e:	f000 f8dc 	bl	4005da <pioc_dir_set>

	mov r0, #0
  400422:	f04f 0000 	mov.w	r0, #0
	mov r1, #26
  400426:	f04f 011a 	mov.w	r1, #26
	bl pioc_dir_set
  40042a:	f000 f8d6 	bl	4005da <pioc_dir_set>

	mov r0, #0
  40042e:	f04f 0000 	mov.w	r0, #0
	mov r1, #29
  400432:	f04f 011d 	mov.w	r1, #29
	bl pioc_dir_set
  400436:	f000 f8d0 	bl	4005da <pioc_dir_set>

	mov r0, #0
  40043a:	f04f 0000 	mov.w	r0, #0
	mov r1, #21
  40043e:	f04f 0115 	mov.w	r1, #21
	bl pioc_dir_set
  400442:	f000 f8ca 	bl	4005da <pioc_dir_set>

	mov r0, #0
  400446:	f04f 0000 	mov.w	r0, #0
	mov r1, #20
  40044a:	f04f 0114 	mov.w	r1, #20
	bl pioc_dir_set
  40044e:	f000 f8c4 	bl	4005da <pioc_dir_set>

	mov r2, OFF
  400452:	f04f 0200 	mov.w	r2, #0
	bl set_r0
  400456:	f7ff fe0d 	bl	400074 <set_r0>

	mov r2, OFF
  40045a:	f04f 0200 	mov.w	r2, #0
	bl set_g0
  40045e:	f7ff fe10 	bl	400082 <set_g0>

	mov r2, OFF
  400462:	f04f 0200 	mov.w	r2, #0
	bl set_b0 
  400466:	f7ff fe13 	bl	400090 <set_b0>

	mov r2, OFF
  40046a:	f04f 0200 	mov.w	r2, #0
	bl set_r1
  40046e:	f7ff fe16 	bl	40009e <set_r1>

	mov r2,OFF
  400472:	f04f 0200 	mov.w	r2, #0
	bl set_g1
  400476:	f7ff fe19 	bl	4000ac <set_g1>

	mov r2,OFF
  40047a:	f04f 0200 	mov.w	r2, #0
	bl set_b1 
  40047e:	f7ff fe1c 	bl	4000ba <set_b1>


pop {pc}
  400482:	bd00      	pop	{pc}

00400484 <load_grid>:
*/
.thumb_func 
.global load_grid
load_grid:

push {r0,r2,r9,r12,lr}
  400484:	e92d 5205 	stmdb	sp!, {r0, r2, r9, ip, lr}
ldr r9, = _etext
  400488:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 400568 <set_pixel_init+0x6>
mov r0, #0 
  40048c:	f04f 0000 	mov.w	r0, #0
ldr r2, =0x20000000 
  400490:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000

00400494 <notloaded>:
notloaded:
	cmp r0, #512 // (Height/2)*(Width)
  400494:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
	beq loaded
  400498:	d006      	beq.n	4004a8 <loaded>

	ldrb r12, [r9], #1
  40049a:	f819 cb01 	ldrb.w	ip, [r9], #1
	strb r12, [r2], #1
  40049e:	f802 cb01 	strb.w	ip, [r2], #1
	add r0, #1
  4004a2:	f100 0001 	add.w	r0, r0, #1
	b notloaded
  4004a6:	e7f5      	b.n	400494 <notloaded>

004004a8 <loaded>:

loaded:
pop {r0,r2,r9,r12,pc}
  4004a8:	e8bd 9205 	ldmia.w	sp!, {r0, r2, r9, ip, pc}

004004ac <set_pixel>:

*/
.thumb_func 
.global set_pixel
set_pixel:
push {r0,r1,r2,r3,lr}
  4004ac:	b50f      	push	{r0, r1, r2, r3, lr}
cmp r6, #1
  4004ae:	2e01      	cmp	r6, #1
beq gohere
  4004b0:	d02a      	beq.n	400508 <gohere>

cmp r9, #16
  4004b2:	f1b9 0f10 	cmp.w	r9, #16
blt case1		
  4004b6:	db15      	blt.n	4004e4 <case1>
sub r0, r9, #16	// y >= 16
  4004b8:	f1a9 0010 	sub.w	r0, r9, #16
mov r1, #32
  4004bc:	f04f 0120 	mov.w	r1, #32
mul r0, r0, r1
  4004c0:	fb00 f001 	mul.w	r0, r0, r1
add r0, r8
  4004c4:	4440      	add	r0, r8
ldr r2, =0x20000000
  4004c6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
ldrb r3, [r2,r0]
  4004ca:	5c13      	ldrb	r3, [r2, r0]
and r3, 0x17 // so that r1 actually can change value of 4th bit
  4004cc:	f003 0317 	and.w	r3, r3, #23
and r1, #0
  4004d0:	f001 0100 	and.w	r1, r1, #0

orr r1, r10
  4004d4:	ea41 010a 	orr.w	r1, r1, sl

lsl r1, r1, #3
  4004d8:	ea4f 01c1 	mov.w	r1, r1, lsl #3
orr r1, r3
  4004dc:	ea41 0103 	orr.w	r1, r1, r3
strb r1, [r2,r0]
  4004e0:	5411      	strb	r1, [r2, r0]
b done
  4004e2:	e03d      	b.n	400560 <done>

004004e4 <case1>:

case1: // y < 16
mov r1, #32
  4004e4:	f04f 0120 	mov.w	r1, #32
mul r0, r9, r1
  4004e8:	fb09 f001 	mul.w	r0, r9, r1
add r0, r8
  4004ec:	4440      	add	r0, r8
and r1, 0 
  4004ee:	f001 0100 	and.w	r1, r1, #0
orr r1, r10
  4004f2:	ea41 010a 	orr.w	r1, r1, sl
ldr r2, =0x20000000
  4004f6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
ldrb r3, [r2,r0]
  4004fa:	5c13      	ldrb	r3, [r2, r0]
and r3, 0x1E
  4004fc:	f003 031e 	and.w	r3, r3, #30
orr r1, r3
  400500:	ea41 0103 	orr.w	r1, r1, r3
strb r1, [r2,r0]
  400504:	5411      	strb	r1, [r2, r0]
b done
  400506:	e02b      	b.n	400560 <done>

00400508 <gohere>:

gohere: 


cmp r9, #16
  400508:	f1b9 0f10 	cmp.w	r9, #16
blt case1b		
  40050c:	db15      	blt.n	40053a <case1b>
sub r0, r9, #16	// y >= 16
  40050e:	f1a9 0010 	sub.w	r0, r9, #16
mov r1, #32
  400512:	f04f 0120 	mov.w	r1, #32
mul r0, r0, r1
  400516:	fb00 f001 	mul.w	r0, r0, r1
add r0, r8
  40051a:	4440      	add	r0, r8

and r1, 0 
  40051c:	f001 0100 	and.w	r1, r1, #0
orr r1, r10
  400520:	ea41 010a 	orr.w	r1, r1, sl
ldr r2, =0x20000000
  400524:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
lsl r1, r1, #4
  400528:	ea4f 1101 	mov.w	r1, r1, lsl #4
ldrb r3, [r2,r0]
  40052c:	5c13      	ldrb	r3, [r2, r0]
and r3, 0x0F
  40052e:	f003 030f 	and.w	r3, r3, #15
orr r1, r3
  400532:	ea41 0103 	orr.w	r1, r1, r3
strb r1, [r2,r0]
  400536:	5411      	strb	r1, [r2, r0]
b done
  400538:	e012      	b.n	400560 <done>

0040053a <case1b>:

case1b: // y < 16
mov r1, #32
  40053a:	f04f 0120 	mov.w	r1, #32
mul r0, r9, r1
  40053e:	fb09 f001 	mul.w	r0, r9, r1
add r0, r8
  400542:	4440      	add	r0, r8
and r1, 0 
  400544:	f001 0100 	and.w	r1, r1, #0
orr r1, r10
  400548:	ea41 010a 	orr.w	r1, r1, sl
ldr r2, =0x20000000
  40054c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
ldrb r3, [r2,r0]
  400550:	5c13      	ldrb	r3, [r2, r0]
and r3, 0x1D
  400552:	f003 031d 	and.w	r3, r3, #29

lsl r1, r1, #1
  400556:	ea4f 0141 	mov.w	r1, r1, lsl #1
orr r1, r3
  40055a:	ea41 0103 	orr.w	r1, r1, r3
strb r1, [r2,r0]
  40055e:	5411      	strb	r1, [r2, r0]

00400560 <done>:


done:
pop {r0,r1,r2,r3,pc}
  400560:	bd0f      	pop	{r0, r1, r2, r3, pc}

00400562 <set_pixel_init>:


.thumb_func 
.global set_pixel_init
set_pixel_init:
push {r0,r1,r2,lr}
  400562:	b507      	push	{r0, r1, r2, lr}

pop {r0,r1,r2,pc}
  400564:	bd07      	pop	{r0, r1, r2, pc}
  400566:	0000      	.short	0x0000
ldr r9, = _etext
  400568:	00400774 	.word	0x00400774

0040056c <pioa_init>:
	enable peripheral clock line to PIOC 
*/
.thumb_func
.global pioa_init
pioa_init:		
	ldr r0, =(PMC + 0x10)
  40056c:	4811      	ldr	r0, [pc, #68]	; (4005b4 <end_l+0xe>)
	mov r1, #1
  40056e:	f04f 0101 	mov.w	r1, #1
	lsl r1, r1, PID11
  400572:	ea4f 21c1 	mov.w	r1, r1, lsl #11
	str r1, [r0]
  400576:	6001      	str	r1, [r0, #0]

	bx lr
  400578:	4770      	bx	lr

0040057a <pioa_dir_set>:
	Set PIO Line Direction
*/
.thumb_func
.global pioa_dir_set
pioa_dir_set:	
	cmp r0, OUTPUT_DIR
  40057a:	2800      	cmp	r0, #0
	bne else_d
  40057c:	d101      	bne.n	400582 <else_d>
	ldr r0, =(PIOA + 0x10) 
  40057e:	480e      	ldr	r0, [pc, #56]	; (4005b8 <end_l+0x12>)
	b end_d
  400580:	e000      	b.n	400584 <end_d>

00400582 <else_d>:
else_d:
	ldr r0, =(PIOA + 0x14) 
  400582:	480e      	ldr	r0, [pc, #56]	; (4005bc <end_l+0x16>)

00400584 <end_d>:
end_d:
	mov r2, #1
  400584:	f04f 0201 	mov.w	r2, #1
	lsl r2, r2, r1			
  400588:	fa02 f201 	lsl.w	r2, r2, r1
	str r2, [r0]	
  40058c:	6002      	str	r2, [r0, #0]

0040058e <enable_writing>:
enable_writing:
	ldr r0, =(PIOA + 0xA0) 
  40058e:	480c      	ldr	r0, [pc, #48]	; (4005c0 <end_l+0x1a>)
	mov r2, #1
  400590:	f04f 0201 	mov.w	r2, #1
	lsl r2, r2, r1
  400594:	fa02 f201 	lsl.w	r2, r2, r1
	str r2, [r0]	
  400598:	6002      	str	r2, [r0, #0]

	bx lr
  40059a:	4770      	bx	lr

0040059c <pioa_level_set>:
	Set PIO Line Level  
*/
.thumb_func
.global pioa_level_set
pioa_level_set:
	cmp r0, LEVEL_HIGH
  40059c:	2801      	cmp	r0, #1
	bne else_l
  40059e:	d101      	bne.n	4005a4 <else_l>
	ldr r0, =(PIOA + 0x30) 
  4005a0:	4808      	ldr	r0, [pc, #32]	; (4005c4 <end_l+0x1e>)
	b end_l
  4005a2:	e000      	b.n	4005a6 <end_l>

004005a4 <else_l>:
else_l:
	ldr r0, =(PIOA + 0x34) 
  4005a4:	4808      	ldr	r0, [pc, #32]	; (4005c8 <end_l+0x22>)

004005a6 <end_l>:
end_l:
	mov r2, #1
  4005a6:	f04f 0201 	mov.w	r2, #1
	lsl r2, r2, r1  
  4005aa:	fa02 f201 	lsl.w	r2, r2, r1
	str r2, [r0]	
  4005ae:	6002      	str	r2, [r0, #0]

	bx lr
  4005b0:	4770      	bx	lr
  4005b2:	0000      	.short	0x0000
	ldr r0, =(PMC + 0x10)
  4005b4:	400e0410 	.word	0x400e0410
	ldr r0, =(PIOA + 0x10) 
  4005b8:	400e0e10 	.word	0x400e0e10
	ldr r0, =(PIOA + 0x14) 
  4005bc:	400e0e14 	.word	0x400e0e14
	ldr r0, =(PIOA + 0xA0) 
  4005c0:	400e0ea0 	.word	0x400e0ea0
	ldr r0, =(PIOA + 0x30) 
  4005c4:	400e0e30 	.word	0x400e0e30
	ldr r0, =(PIOA + 0x34) 
  4005c8:	400e0e34 	.word	0x400e0e34

004005cc <pioc_init>:
	enable peripheral clock line to PIOC 
*/
.thumb_func
.global pioc_init
pioc_init:		
	ldr r0, =(PMC + 0x10)
  4005cc:	4811      	ldr	r0, [pc, #68]	; (400614 <end_l+0xe>)
	mov r1, #1
  4005ce:	f04f 0101 	mov.w	r1, #1
	lsl r1, r1, PID13
  4005d2:	ea4f 3141 	mov.w	r1, r1, lsl #13
	str r1, [r0] /* PCER0.bit13 = 1 */
  4005d6:	6001      	str	r1, [r0, #0]

	bx lr
  4005d8:	4770      	bx	lr

004005da <pioc_dir_set>:
	Set PIO Line Direction
*/
.thumb_func
.global pioc_dir_set
pioc_dir_set:	
	cmp r0, OUTPUT_DIR
  4005da:	2800      	cmp	r0, #0
	bne else_d
  4005dc:	d101      	bne.n	4005e2 <else_d>
	ldr r0, =(PIOC + 0x10) 
  4005de:	480e      	ldr	r0, [pc, #56]	; (400618 <end_l+0x12>)
	b end_d
  4005e0:	e000      	b.n	4005e4 <end_d>

004005e2 <else_d>:
else_d:
	ldr r0, =(PIOC + 0x14) 
  4005e2:	480e      	ldr	r0, [pc, #56]	; (40061c <end_l+0x16>)

004005e4 <end_d>:
end_d:
	mov r2, #1
  4005e4:	f04f 0201 	mov.w	r2, #1
	lsl r2, r2, r1			
  4005e8:	fa02 f201 	lsl.w	r2, r2, r1
	str r2, [r0]	
  4005ec:	6002      	str	r2, [r0, #0]

004005ee <enable_writing>:
enable_writing:
	ldr r0, =(PIOC + 0xA0) 
  4005ee:	480c      	ldr	r0, [pc, #48]	; (400620 <end_l+0x1a>)
	mov r2, #1
  4005f0:	f04f 0201 	mov.w	r2, #1
	lsl r2, r2, r1
  4005f4:	fa02 f201 	lsl.w	r2, r2, r1
	str r2, [r0]	
  4005f8:	6002      	str	r2, [r0, #0]

	bx lr
  4005fa:	4770      	bx	lr

004005fc <pioc_level_set>:
	Set PIO Line Level  
*/
.thumb_func
.global pioc_level_set
pioc_level_set:
	cmp r0, LEVEL_HIGH
  4005fc:	2801      	cmp	r0, #1
	bne else_l
  4005fe:	d101      	bne.n	400604 <else_l>
	ldr r0, =(PIOC + 0x30) 
  400600:	4808      	ldr	r0, [pc, #32]	; (400624 <end_l+0x1e>)
	b end_l
  400602:	e000      	b.n	400606 <end_l>

00400604 <else_l>:
else_l:
	ldr r0, =(PIOC + 0x34) 
  400604:	4808      	ldr	r0, [pc, #32]	; (400628 <end_l+0x22>)

00400606 <end_l>:
end_l:
	mov r2, #1
  400606:	f04f 0201 	mov.w	r2, #1
	lsl r2, r2, r1  
  40060a:	fa02 f201 	lsl.w	r2, r2, r1
	str r2, [r0]	
  40060e:	6002      	str	r2, [r0, #0]

	bx lr
  400610:	4770      	bx	lr
  400612:	0000      	.short	0x0000
	ldr r0, =(PMC + 0x10)
  400614:	400e0410 	.word	0x400e0410
	ldr r0, =(PIOC + 0x10) 
  400618:	400e1210 	.word	0x400e1210
	ldr r0, =(PIOC + 0x14) 
  40061c:	400e1214 	.word	0x400e1214
	ldr r0, =(PIOC + 0xA0) 
  400620:	400e12a0 	.word	0x400e12a0
	ldr r0, =(PIOC + 0x30) 
  400624:	400e1230 	.word	0x400e1230
	ldr r0, =(PIOC + 0x34) 
  400628:	400e1234 	.word	0x400e1234

0040062c <register_fini>:
  40062c:	4b02      	ldr	r3, [pc, #8]	; (400638 <register_fini+0xc>)
  40062e:	b113      	cbz	r3, 400636 <register_fini+0xa>
  400630:	4802      	ldr	r0, [pc, #8]	; (40063c <register_fini+0x10>)
  400632:	f000 b805 	b.w	400640 <atexit>
  400636:	4770      	bx	lr
  400638:	00000000 	.word	0x00000000
  40063c:	0040064d 	.word	0x0040064d

00400640 <atexit>:
  400640:	2300      	movs	r3, #0
  400642:	4601      	mov	r1, r0
  400644:	461a      	mov	r2, r3
  400646:	4618      	mov	r0, r3
  400648:	f000 b81e 	b.w	400688 <__register_exitproc>

0040064c <__libc_fini_array>:
  40064c:	b538      	push	{r3, r4, r5, lr}
  40064e:	4c0a      	ldr	r4, [pc, #40]	; (400678 <__libc_fini_array+0x2c>)
  400650:	4d0a      	ldr	r5, [pc, #40]	; (40067c <__libc_fini_array+0x30>)
  400652:	1b64      	subs	r4, r4, r5
  400654:	10a4      	asrs	r4, r4, #2
  400656:	d00a      	beq.n	40066e <__libc_fini_array+0x22>
  400658:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40065c:	3b01      	subs	r3, #1
  40065e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  400662:	3c01      	subs	r4, #1
  400664:	f855 3904 	ldr.w	r3, [r5], #-4
  400668:	4798      	blx	r3
  40066a:	2c00      	cmp	r4, #0
  40066c:	d1f9      	bne.n	400662 <__libc_fini_array+0x16>
  40066e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  400672:	f000 b877 	b.w	400764 <_fini>
  400676:	bf00      	nop
  400678:	00400774 	.word	0x00400774
  40067c:	00400770 	.word	0x00400770

00400680 <__retarget_lock_acquire_recursive>:
  400680:	4770      	bx	lr
  400682:	bf00      	nop

00400684 <__retarget_lock_release_recursive>:
  400684:	4770      	bx	lr
  400686:	bf00      	nop

00400688 <__register_exitproc>:
  400688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40068c:	4d2c      	ldr	r5, [pc, #176]	; (400740 <__register_exitproc+0xb8>)
  40068e:	4606      	mov	r6, r0
  400690:	6828      	ldr	r0, [r5, #0]
  400692:	4698      	mov	r8, r3
  400694:	460f      	mov	r7, r1
  400696:	4691      	mov	r9, r2
  400698:	f7ff fff2 	bl	400680 <__retarget_lock_acquire_recursive>
  40069c:	4b29      	ldr	r3, [pc, #164]	; (400744 <__register_exitproc+0xbc>)
  40069e:	681c      	ldr	r4, [r3, #0]
  4006a0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4006a4:	2b00      	cmp	r3, #0
  4006a6:	d03e      	beq.n	400726 <__register_exitproc+0x9e>
  4006a8:	685a      	ldr	r2, [r3, #4]
  4006aa:	2a1f      	cmp	r2, #31
  4006ac:	dc1c      	bgt.n	4006e8 <__register_exitproc+0x60>
  4006ae:	f102 0e01 	add.w	lr, r2, #1
  4006b2:	b176      	cbz	r6, 4006d2 <__register_exitproc+0x4a>
  4006b4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4006b8:	2401      	movs	r4, #1
  4006ba:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4006be:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4006c2:	4094      	lsls	r4, r2
  4006c4:	4320      	orrs	r0, r4
  4006c6:	2e02      	cmp	r6, #2
  4006c8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4006cc:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4006d0:	d023      	beq.n	40071a <__register_exitproc+0x92>
  4006d2:	3202      	adds	r2, #2
  4006d4:	f8c3 e004 	str.w	lr, [r3, #4]
  4006d8:	6828      	ldr	r0, [r5, #0]
  4006da:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4006de:	f7ff ffd1 	bl	400684 <__retarget_lock_release_recursive>
  4006e2:	2000      	movs	r0, #0
  4006e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4006e8:	4b17      	ldr	r3, [pc, #92]	; (400748 <__register_exitproc+0xc0>)
  4006ea:	b30b      	cbz	r3, 400730 <__register_exitproc+0xa8>
  4006ec:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4006f0:	f3af 8000 	nop.w
  4006f4:	4603      	mov	r3, r0
  4006f6:	b1d8      	cbz	r0, 400730 <__register_exitproc+0xa8>
  4006f8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4006fc:	6002      	str	r2, [r0, #0]
  4006fe:	2100      	movs	r1, #0
  400700:	6041      	str	r1, [r0, #4]
  400702:	460a      	mov	r2, r1
  400704:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  400708:	f04f 0e01 	mov.w	lr, #1
  40070c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  400710:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  400714:	2e00      	cmp	r6, #0
  400716:	d0dc      	beq.n	4006d2 <__register_exitproc+0x4a>
  400718:	e7cc      	b.n	4006b4 <__register_exitproc+0x2c>
  40071a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40071e:	430c      	orrs	r4, r1
  400720:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  400724:	e7d5      	b.n	4006d2 <__register_exitproc+0x4a>
  400726:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40072a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40072e:	e7bb      	b.n	4006a8 <__register_exitproc+0x20>
  400730:	6828      	ldr	r0, [r5, #0]
  400732:	f7ff ffa7 	bl	400684 <__retarget_lock_release_recursive>
  400736:	f04f 30ff 	mov.w	r0, #4294967295
  40073a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40073e:	bf00      	nop
  400740:	20000828 	.word	0x20000828
  400744:	0040074c 	.word	0x0040074c
  400748:	00000000 	.word	0x00000000

0040074c <_global_impure_ptr>:
  40074c:	20000400                                ... 

00400750 <_init>:
  400750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400752:	bf00      	nop
  400754:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400756:	bc08      	pop	{r3}
  400758:	469e      	mov	lr, r3
  40075a:	4770      	bx	lr

0040075c <__init_array_start>:
  40075c:	0040062d 	.word	0x0040062d

00400760 <__frame_dummy_init_array_entry>:
  400760:	0040002d                                -.@.

00400764 <_fini>:
  400764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400766:	bf00      	nop
  400768:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40076a:	bc08      	pop	{r3}
  40076c:	469e      	mov	lr, r3
  40076e:	4770      	bx	lr

00400770 <__fini_array_start>:
  400770:	00400009 	.word	0x00400009
